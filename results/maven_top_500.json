[
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-05-17T08:50:05.360000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\r\n\r\n[ch.qos.logback:logback-classic](https://mvnrepository.com/artifact/ch.qos.logback/logback-classic) is a reliable, generic, fast and flexible logging library for Java.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data\r\nvia the the `SocketServer` and `ServerSocketReceiver` components.\r\n\r\nA configuration can be turned on to allow remote logging through interfaces that accept untrusted serialized data. Authenticated attackers on the adjacent network can exploit this vulnerability to run arbitrary code through the deserialization of custom gadget chains.\r\n\r\n## Remediation\r\n\r\nUpgrade `ch.qos.logback:logback-classic` to version 1.2.0 or higher.\r\n\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## References\r\n\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5929)\r\n\r\n- [Logback Security Advisory](https://logback.qos.ch/news.html)\r\n",
        "disclosureTime": "2017-03-14T06:17:58Z",
        "functions": [
          {
            "functionId": {
              "className": "SocketNode",
              "filePath": "ch/qos/logback/classic/net/SocketNode.java",
              "functionName": "run"
            },
            "version": [
              "[0.3,1.2.0)"
            ]
          },
          {
            "functionId": {
              "className": "RemoteAppenderStreamClient",
              "filePath": "ch/qos/logback/classic/net/server/RemoteAppenderStreamClient.java",
              "functionName": "run"
            },
            "version": [
              "[1.0.12,1.2.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-CHQOSLOGBACK-31407",
        "identifiers": {
          "CVE": [
            "CVE-2017-5929"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "logback-classic",
          "groupId": "ch.qos.logback"
        },
        "methods": [
          {
            "methodId": {
              "className": "SocketNode",
              "filePath": "ch/qos/logback/classic/net/SocketNode.java",
              "methodName": "run"
            },
            "version": [
              "[0.3,1.2.0)"
            ]
          },
          {
            "methodId": {
              "className": "RemoteAppenderStreamClient",
              "filePath": "ch/qos/logback/classic/net/server/RemoteAppenderStreamClient.java",
              "methodName": "run"
            },
            "version": [
              "[1.0.12,1.2.0)"
            ]
          }
        ],
        "modificationTime": "2019-03-19T14:27:57.375886Z",
        "moduleName": "ch.qos.logback:logback-classic",
        "packageManager": "maven",
        "packageName": "ch.qos.logback:logback-classic",
        "patches": [],
        "publicationTime": "2017-05-21T07:52:36Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5929"
          },
          {
            "title": "Logback Security Advisory",
            "url": "https://logback.qos.ch/news.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0.3,1.2.0)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "ch.qos.logback:logback-classic@1.1.3"
        ],
        "upgradePath": [
          false,
          "ch.qos.logback:logback-classic@1.2.0"
        ],
        "version": "1.1.3",
        "name": "ch.qos.logback:logback-classic",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "scala/scala@scala/scala",
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.11@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.7",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-21T09:36:25.505000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\nAffected versions of [`org.scala-lang:scala-compiler`](https://scala-lang.org) are vulnerable to Arbitrary Code Execution.\n\nThe compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.\n\n## Remediation\nUpgrade `org.scala-lang:scala-compiler` to version 2.12.4 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-15288)\n- [GitHub PR #1](https://github.com/scala/scala/pull/6108)\n- [GitHub PR #2](https://github.com/scala/scala/pull/6120)\n- [GitHub PR #3](https://github.com/scala/scala/pull/6128)\n- [GitHub Commit #1](https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f)\n- [GitHub Commit #2](https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757)\n- [GitHub Commit #3](https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f)\n",
        "disclosureTime": "2017-10-02T21:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGSCALALANG-31592",
        "identifiers": {
          "CVE": [
            "CVE-2017-15288"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "scala-compiler",
          "groupId": "org.scala-lang"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.946109Z",
        "moduleName": "org.scala-lang:scala-compiler",
        "packageManager": "maven",
        "packageName": "org.scala-lang:scala-compiler",
        "patches": [],
        "publicationTime": "2017-11-28T14:47:22.036000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-15288"
          },
          {
            "title": "GitHub PR #1",
            "url": "https://github.com/scala/scala/pull/6108"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/scala/scala/pull/6120"
          },
          {
            "title": "GitHub PR #3",
            "url": "https://github.com/scala/scala/pull/6128"
          },
          {
            "title": "GitHub Commit #1",
            "url": "https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f"
          },
          {
            "title": "GitHub Commit #2",
            "url": "https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757"
          },
          {
            "title": "GitHub Commit #3",
            "url": "https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.7),[2.11,2.11.12),[2.12,2.12.4)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "scala/scala@scala/scala",
          "org.scala-lang:scala-compiler@benchmarkScalaVersion"
        ],
        "upgradePath": [
          false,
          "org.scala-lang:scala-compiler@2.10.7"
        ],
        "version": "benchmarkScalaVersion",
        "name": "org.scala-lang:scala-compiler",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 50,
    "severityMap": {
      "high": 5,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "11 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 5,
    "path": "https://github.com/scala/scala"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 372481d1-b9f4-4d0f-9628-88b4247db248)",
    "path": "http://code.google.com/p/mockito/source/browse/"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/elasticsearch/elasticsearch"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/spring-projects/spring-boot"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/google/guava.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/spring-projects/spring-framework"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/junit-team/junit4"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/hibernate/hibernate-orm"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-databind"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ReactiveX/RxJava"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/square/okhttp.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7bca3065-a4ca-4b21-aedb-efe036f2d82a)",
    "path": "https://github.com/rzwitserloot/lombok"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f4f4edf3-5a14-43e7-b36f-99e1769db4cc)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9048efed-a666-42d7-8dd9-e7461892fd46)",
    "path": "https://github.com/java-native-access/jna"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/qos-ch/logback"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0fc04b0f-5075-41fa-a968-b7a0771cadf9)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-api"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e79bf8d3-ea3f-41f1-b0a4-ba738fb1be80)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-log4j12"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/spring-projects/spring-boot.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 1d826f93-bd9d-4f71-af6b-13876432aeca)",
    "path": "https://github.com/JetBrains/kotlin"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 3d86251f-055e-4402-b961-2f9b4ef705b0)",
    "path": "scm:git:git://github.com/JakeWharton/butterknife.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/alibaba/fastjson"
  },
  {
    "ok": false,
    "error": "Internal error (reference: cee8b2c0-9eff-4721-8246-87f4619f633e)",
    "path": "http://google-gson.googlecode.com/svn/tags/gson-2.2"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 559349e6-417d-4f70-a13b-3289d70e2ed6)",
    "path": "https://github.com/SeleniumHQ/selenium.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 14,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mybatis/mybatis-3"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 5,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/brettwooldridge/HikariCP"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 25277f56-1646-4ddd-aad6-d05b6a5c7059)",
    "path": "scm:git:git://github.com/google/guice.git/guice"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/dropwizard/dropwizard.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/JodaOrg/joda-time"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2633bb34-445e-4337-ae1a-b7b5448143c1)",
    "path": "https://github.com/junit-team/junit5"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 217f09b9-29b0-4a15-af9c-fab4ec59893e)",
    "path": "http://h2database.googlecode.com/svn/trunk"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 4,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/joel-costigliola/assertj-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0c313b8b-5474-467b-8d79-dad73f184efd)",
    "path": "https://github.com/mysql/mysql-connector-j"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/elastic/elasticsearch"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 242533ec-eae5-4dcf-84c7-6803366c8e24)",
    "path": "scm:git:git://github.com/square/retrofit.git/retrofit-adapters/adapter-rxjava"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/square/retrofit.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b38d41c4-429b-43a3-966a-3029b8464424)",
    "path": "scm:git:git://github.com/square/retrofit.git/retrofit"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 1da5caa0-365b-49a5-85e6-afc5f9400e43)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-all"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 73d76549-0a03-4b31-b93e-ceabc53259c6)",
    "path": "scm:git:git://github.com/dropwizard/dropwizard.git/dropwizard-testing"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 96855d45-ecdc-44c5-be62-0aebac297b2f)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-jvm"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d0cc856b-1288-42a4-9304-87ac0772b910)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-annotation"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jhy/jsoup"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/typesafehub/config"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7dfe6637-cdb0-4f83-89f9-26b0d87b3873)",
    "path": "scm:git:git://github.com/spring-projects/spring-security"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 48a70d3b-e74d-4ffb-8c76-c7ce4b093f38)",
    "path": "https://github.com/douglascrockford/JSON-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 212637bf-9dfd-4e85-90ee-89c66c316939)",
    "path": "http://git.codehaus.org/gitweb.cgi?p=groovy-git.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 494c07ce-4898-4be7-ad45-ba611ebf4546)",
    "path": "http://cglib.cvs.sourceforge.net/cglib"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 05e0528e-a4e4-47fe-a3ff-2e05d4048b79)",
    "path": "scm:git:git://github.com/powermock/powermock"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mongodb/mongo-java-driver"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 6,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/cbeust/testng"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 28afa68a-4564-4289-b871-2e7aa0877e79)",
    "path": "git@github.com:qos-ch/slf4j.git/jcl-over-slf4j"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-annotations"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7829dc58-8d7c-42ea-bf69-95f8de52ce0c)",
    "path": "scm:git:git://github.com/easymock/easymock.git/easymock"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b74e6c4f-c289-4a1e-9afd-14e292126dde)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-tools/spring-boot-configuration-processor"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e59af4d1-3a84-44be-9eae-4d356e13c328)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-devtools"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 4a3ca057-db4e-4a04-9911-af56b8cc36be)",
    "path": "scm:git:https://github.com/square/okhttp.git/okhttp"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/square/okhttp"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 90f557d2-76af-4bdf-bc99-ed3e8d4c15d1)",
    "path": "scm:git:git://github.com/netty/netty.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/LMAX-Exchange/disruptor"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/xetorthio/jedis"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 3,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/clojure/clojure"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 43c9348f-46fa-4ee1-881e-74977341eb06)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-json"
  },
  {
    "ok": false,
    "error": "Internal error (reference: fbc54e9a-c51b-4413-963b-f2af6b5c9b5e)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-healthchecks"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5c12d3af-28da-45d3-8e6e-8e0e6a486ab5)",
    "path": "scm:git:https://github.com/square/okio.git/okio"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 56cb5fb1-a5b3-4e34-9663-9cdb32dfda60)",
    "path": "scm:git:git@github.com:swagger-api/swagger-core.git/swagger-jaxrs"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/swagger-api/swagger-core.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e99cc551-3a69-4b5b-9d18-a0e20056685e)",
    "path": "scm:git:git@github.com:swagger-api/swagger-core.git/swagger-jersey2-jaxrs"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/grpc/grpc-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/springfox/springfox"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/eclipse/jetty.project.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b8c6720d-5df4-4c2d-8516-0c2987de5c57)",
    "path": "http://fisheye.jboss.org/browse/javassist/"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0694ac22-ba3a-404c-a95c-58016a1f4a6a)",
    "path": "https://github.com/liferay/liferay-portal"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 25177969-011e-40b5-a771-369f1ec2904c)",
    "path": "git@github.com:qos-ch/slf4j.git/log4j-over-slf4j"
  },
  {
    "ok": false,
    "error": "Internal error (reference: db65c8e8-ed97-4a01-b5cb-04f4a920bb1b)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-simple"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b248866e-853e-4910-9db7-eeecf3af03c9)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-jdk14"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 55c336bc-7105-4de9-b485-5aceae8bd2d3)",
    "path": "git@github.com:qos-ch/slf4j.git/jul-to-slf4j"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0fcb7a02-c9e7-4f08-8763-001b59d09829)",
    "path": "scm:git:git://github.com/hibernate/hibernate-validator.git/hibernate-validator"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-14T14:43:48.569000Z",
        "credit": [
          "Liao Xinxi"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\nAffected versions of [`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) are vulnerable to Deserialization of Untrusted Data. An attacker may exploit this issue by sending a maliciously crafted input to the `readValue` method of the `ObjectMapper`.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.9 or higher.\n\n## References\n- [Github PR](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1462702)\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/1599)\n- [Github Commit](https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1)\n",
        "disclosureTime": "2017-04-10T21:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.9)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507",
        "identifiers": {
          "CVE": [
            "CVE-2017-7525"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.9)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:36.378971Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2017-09-14T14:43:48.569000Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1462702"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1599"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.9)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.9"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-20T15:28:35.195000Z",
        "credit": [
          "Alessio Soldano"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`com.fasterxml.jackson.core:jackson-core`](https://github.com/FasterXML/jackson-core) is a core part of Jackson that defines Streaming API as well as basic shared abstractions.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service attacks. \r\nIf the REST endpoint consumes POST requests with JSON or XML data and data are invalid, the first unrecognized token is printed to server.log\r\n> If the first token is word of length 10MB, the whole word is printed. This is potentially dangerous and can be used to attack the server by filling the disk with logs.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.8.6` or higher.\r\n\r\n## References\r\n- [Github PR](https://github.com/FasterXML/jackson-core/pull/322)\r\n- [Jira Issue](https://issues.jboss.org/browse/JBEAP-6316)",
        "disclosureTime": "2017-01-12T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "functionId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-core",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "methodId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "modificationTime": "2019-02-05T12:29:08.265741Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-core",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-core",
        "patches": [],
        "publicationTime": "2017-09-20T15:28:35Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://github.com/FasterXML/jackson-core/pull/322"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.jboss.org/browse/JBEAP-6316"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.6)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-core@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-core@2.8.6"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-20T15:28:35.195000Z",
        "credit": [
          "Alessio Soldano"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`com.fasterxml.jackson.core:jackson-core`](https://github.com/FasterXML/jackson-core) is a core part of Jackson that defines Streaming API as well as basic shared abstractions.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service attacks. \r\nIf the REST endpoint consumes POST requests with JSON or XML data and data are invalid, the first unrecognized token is printed to server.log\r\n> If the first token is word of length 10MB, the whole word is printed. This is potentially dangerous and can be used to attack the server by filling the disk with logs.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.8.6` or higher.\r\n\r\n## References\r\n- [Github PR](https://github.com/FasterXML/jackson-core/pull/322)\r\n- [Jira Issue](https://issues.jboss.org/browse/JBEAP-6316)",
        "disclosureTime": "2017-01-12T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "functionId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-core",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "methodId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "modificationTime": "2019-02-05T12:29:08.265741Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-core",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-core",
        "patches": [],
        "publicationTime": "2017-09-20T15:28:35Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://github.com/FasterXML/jackson-core/pull/322"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.jboss.org/browse/JBEAP-6316"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.6)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4",
          "com.fasterxml.jackson.core:jackson-core@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.6",
          "com.fasterxml.jackson.core:jackson-core@2.8.6"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-07T13:13:32.343000Z",
        "credit": [
          "Liao Xinxi"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)).\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.10 or higher.\n\n## References\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1506612)\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/1680)\n- [Github Issue #2](https://github.com/FasterXML/jackson-databind/issues/1737)\n- [Github Commit #1](https://github.com/FasterXML/jackson-databind/commit/e8f043d1)\n- [Github Commit #2](https://github.com/FasterXML/jackson-databind/commit/e8f043d1)\n",
        "disclosureTime": "2017-06-26T21:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.10)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31573",
        "identifiers": {
          "CVE": [
            "CVE-2017-15095"
          ],
          "CWE": [
            "CWE-184"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.10)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:08:19.457488Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2017-11-09T03:13:32.343000Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1506612"
          },
          {
            "title": "Github Issue #1",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1680"
          },
          {
            "title": "Github Issue #2",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1737"
          },
          {
            "title": "Github Commit #1",
            "url": "https://github.com/FasterXML/jackson-databind/commit/e8f043d1"
          },
          {
            "title": "Github Commit #2",
            "url": "https://github.com/FasterXML/jackson-databind/commit/e8f043d1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.10)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-11T11:41:28.547000Z",
        "credit": [
          "Imre Rad"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [Securityfocus Thread](http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1855)\n- [PoC Project](https://github.com/irsl/jackson-rce-via-spel/)\n",
        "disclosureTime": "2018-01-10T11:41:28.547000Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043",
        "identifiers": {
          "CVE": [
            "CVE-2017-17485"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:07:52.311084Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-01-22T12:30:55.344000Z",
        "references": [
          {
            "title": "Securityfocus Thread",
            "url": "http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1855"
          },
          {
            "title": "PoC Project",
            "url": "https://github.com/irsl/jackson-rce-via-spel/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-22T15:40:18.105000Z",
        "credit": [
          "Rui Chong"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) and [CVE-2017-17485](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043)). This is exploitable via two different gadgets that bypass a blacklist.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1899)\n- [GitHub Commit](https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05)\n",
        "disclosureTime": "2018-01-18T15:40:18.104000Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32044",
        "identifiers": {
          "CVE": [
            "CVE-2018-5968"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:05:33.494824Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-01-23T13:17:24.437000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1899"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-02-26T15:13:40.723000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.1, 2.9.5 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)",
        "disclosureTime": "2018-02-10T15:13:40Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
        "identifiers": {
          "CVE": [
            "CVE-2018-7489"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "modificationTime": "2019-01-22T14:48:14.090324Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-02-26T15:13:40Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1931"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11.1)",
            "[2.9.0, 2.9.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:11:34.234921Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n",
        "disclosureTime": "2018-05-29T17:00:04Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
        "identifiers": {
          "CVE": [
            "CVE-2018-12022"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:54.614880Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:00:03Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2052"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:14:00.916831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n",
        "disclosureTime": "2018-05-10T17:10:58Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
        "identifiers": {
          "CVE": [
            "CVE-2018-11307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:14.778205Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:10:50Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2032"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:16:09.944095Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to zCVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/issues/2058)\n",
        "disclosureTime": "2018-05-29T17:15:50Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
        "identifiers": {
          "CVE": [
            "CVE-2018-12023"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:33.816672Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:15:49Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2058"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jsr310@FasterXML/jackson-datatype-jsr310",
          "com.fasterxml.jackson.core:jackson-databind@2.8.4"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.4",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 3,
    "severityMap": {
      "high": 15,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "17 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 16,
    "path": "https://github.com/FasterXML/jackson-datatype-jsr310"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 86f7b8a4-f0b4-4822-8b78-0aaee83a7814)",
    "path": "https://github.com/purplefox/vert.x"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/twbs/bootstrap"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jquery/jquery"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/bumptech/glide"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Netflix/hystrix"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/alibaba/druid"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 92ab69d1-383c-49b2-afde-96434d3a4faf)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-platform"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 4d22f738-447b-4357-8e33-79af17f20f38)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx"
  },
  {
    "ok": false,
    "error": "Internal error (reference: ac5f8c91-efc0-4318-91ee-ef2bd97c2212)",
    "path": "https://github.com/google/dagger.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f587a1e3-35fd-4c77-95a4-c27d8d19c901)",
    "path": "git@github.com:apache/flink.git/flink-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 16,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/perwendel/spark"
  },
  {
    "ok": false,
    "error": "Internal error (reference: abda583c-e6a9-4fdc-b58f-ca9bf1d3aaa1)",
    "path": "scm:git:git://github.com/google/guice.git/extensions-parent/guice-assistedinject"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/square/javapoet"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 921b7fd2-9cc3-4369-92a0-80dfb8f553ca)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-graphite"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 4dea8842-c160-4046-9911-d4a106609262)",
    "path": "scm:git:git://github.com/JakeWharton/timber.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ben-manes/caffeine"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/AsyncHttpClient/async-http-client.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/facebook/facebook-android-sdk"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 16,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/checkstyle/checkstyle"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jwtk/jjwt"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/EsotericSoftware/kryo.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/flyway/flyway.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 78fec9ca-7093-48cb-aae3-3e61561c6361)",
    "path": "scm:git:git://github.com/jayway/rest-assured.git/rest-assured"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b8670c76-ac17-48a6-91f4-f7bb991228d6)",
    "path": "https://mybatis.googlecode.com/svn/sub-projects/generator/tags/mybatis-generator-1.3.2/mybatis-generator-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/spring-projects/spring-security"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 1fd4bda7-582c-4800-b800-115f80ff0a97)",
    "path": "https://jooq.svn.sourceforge.net/svnroot/jooq"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/javaparser/javaparser"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/google/truth.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mybatis/spring"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f7a91c09-9bbd-4258-bb0a-dcc0a27ca74d)",
    "path": "scm:git:git@github.com:hamcrest/JavaHamcrest.git/hamcrest-all"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c25a7998-1301-4f0a-abc7-06f149213493)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-nop"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://bitbucket.org/xerial/sqlite-jdbc"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e05b3b0c-4baf-4375-afe8-23be7241d360)",
    "path": "scm:git:https://github.com/google/google-api-java-client.git/google-api-client"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/stefanbirkner/system-rules"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-dataformats-text"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 40db80dc-ea61-42cb-b501-9db2ec837ec3)",
    "path": "https://svn.apache.org/repos/asf/xerces/java/"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 59c1e99a-d642-4acf-a6ee-a53ed4d7a29d)",
    "path": "http://svn.apache.org/viewvc/logging/log4j/tags/v1_2_17_rc3"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/facebook/react"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/moment/moment"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2958bbc6-e707-4aaf-a56e-5fc44520bd95)",
    "path": "http://zxing.googlecode.com/svn/tags/core-2.1"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 46b434f2-044c-4a57-9b67-fc3159dabbab)",
    "path": "scm:git:https://github.com/ReactiveX/RxAndroid.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/googlei18n/libphonenumber"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 828e435b-51a2-47ee-a183-acf39a258a24)",
    "path": "git@github.com:apache/flink.git/flink-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 27dd52cf-9a76-40ff-b3b4-da0c7dd314cb)",
    "path": "https://github.com/JetBrains/intellij-community"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d10de81b-610e-415d-b061-c3c18ef33561)",
    "path": "scm:git:git://github.com/google/guice.git/extensions-parent/guice-servlet"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/google/auto"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/dropwizard/dropwizard"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 444e7063-5a49-4cce-bc2c-50a2ad969442)",
    "path": "scm:git:git://github.com/dropwizard/dropwizard.git/dropwizard-assets"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9f22e21d-166e-48ce-aa51-5b81e15be3d0)",
    "path": "https://github.com/neo4j/community"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/neo4j/neo4j"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a07052b7-3d1c-4f1f-883d-20f55bf0b9a6)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-servlet"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c81ee55b-6fac-4b68-8a24-973a2b738acb)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-servlets"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 6a6ebb31-09f6-432e-b7df-879b3fe6aa06)",
    "path": "scm:git:git://github.com/antlr/antlr4.git/antlr4-runtime"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/TooTallNate/Java-WebSocket"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 753dabf3-b692-4b37-b525-ff3425518849)",
    "path": "scm:git:git@github.com:EsotericSoftware/kryo.git/kryo-shaded"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 79c57bb9-143e-4da6-ab26-b6f46f3385d5)",
    "path": "scm:git:git://github.com/SpringSource/spring-security-oauth.git/spring-security-oauth2"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Atmosphere/atmosphere"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-11T11:41:28.547000Z",
        "credit": [
          "Imre Rad"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [Securityfocus Thread](http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1855)\n- [PoC Project](https://github.com/irsl/jackson-rce-via-spel/)\n",
        "disclosureTime": "2018-01-10T11:41:28.547000Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043",
        "identifiers": {
          "CVE": [
            "CVE-2017-17485"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:07:52.311084Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-01-22T12:30:55.344000Z",
        "references": [
          {
            "title": "Securityfocus Thread",
            "url": "http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1855"
          },
          {
            "title": "PoC Project",
            "url": "https://github.com/irsl/jackson-rce-via-spel/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-22T15:40:18.105000Z",
        "credit": [
          "Rui Chong"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) and [CVE-2017-17485](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043)). This is exploitable via two different gadgets that bypass a blacklist.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1899)\n- [GitHub Commit](https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05)\n",
        "disclosureTime": "2018-01-18T15:40:18.104000Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32044",
        "identifiers": {
          "CVE": [
            "CVE-2018-5968"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:05:33.494824Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-01-23T13:17:24.437000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1899"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-02-26T15:13:40.723000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.1, 2.9.5 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)",
        "disclosureTime": "2018-02-10T15:13:40Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
        "identifiers": {
          "CVE": [
            "CVE-2018-7489"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "modificationTime": "2019-01-22T14:48:14.090324Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-02-26T15:13:40Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1931"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11.1)",
            "[2.9.0, 2.9.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:11:34.234921Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n",
        "disclosureTime": "2018-05-29T17:00:04Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
        "identifiers": {
          "CVE": [
            "CVE-2018-12022"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:54.614880Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:00:03Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2052"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:14:00.916831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n",
        "disclosureTime": "2018-05-10T17:10:58Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
        "identifiers": {
          "CVE": [
            "CVE-2018-11307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:14.778205Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:10:50Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2032"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:16:09.944095Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to zCVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/issues/2058)\n",
        "disclosureTime": "2018-05-29T17:15:50Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
        "identifiers": {
          "CVE": [
            "CVE-2018-12023"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:33.816672Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:15:49Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2058"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "tomakehurst/wiremock@tomakehurst/wiremock",
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.4",
          "com.fasterxml.jackson.core:jackson-databind@2.8.10"
        ],
        "upgradePath": [
          false,
          "com.flipkart.zjsonpatch:zjsonpatch@0.4.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.10",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 30,
    "severityMap": {
      "high": 13,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "13 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 13,
    "path": "https://github.com/tomakehurst/wiremock"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 20,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/apache/groovy"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/aws/aws-sdk-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/raphw/byte-buddy.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/auth0/java-jwt"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/yusuke/twitter4j"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 83c1cc39-7342-4c46-9688-b59bf3313b0b)",
    "path": "http://github.spockframework.org/spock"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8bd24f35-f989-4db5-82ff-30b9c3e7bd87)",
    "path": "scm:git:git://github.com/cucumber/cucumber-jvm.git/cucumber-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b2e29173-24b2-43ef-a8d0-0f681c74bce8)",
    "path": "scm:git:git://github.com/cucumber/cucumber-jvm.git/cucumber-junit"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 50840036-33f2-4af2-bce1-14a4fd09fcf7)",
    "path": "scm:git:git@github.com:liquibase/liquibase.git/liquibase-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/hamcrest/JavaHamcrest"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 5,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/thymeleaf/thymeleaf"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a2daf57c-d4e7-4bfb-ac7d-d8a1f427a5eb)",
    "path": "scm:git:git@github.com:liferay/liferay-portal.git/portal-service"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a02b3451-1f22-4fef-b649-0a01269dbfa3)",
    "path": "scm:git:git://github.com/jgrapht/jgrapht.git/jgrapht-core"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "spotify/docker-client@spotify/docker-client",
          "com.google.guava:guava@20.0"
        ],
        "upgradePath": [
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "20.0",
        "name": "com.google.guava:guava",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "spotify/docker-client@spotify/docker-client",
          "com.fasterxml.jackson.datatype:jackson-datatype-guava@2.9.8",
          "com.google.guava:guava@20.0"
        ],
        "upgradePath": [
          false,
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "20.0",
        "name": "com.google.guava:guava",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-01-17T07:28:21.802000Z",
        "credit": [
          "James Kettle"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.httpcomponents:httpclient`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22httpclient%22) is HttpClient component of the Apache HttpComponents project.\r\n\r\nAffected versions of the package are vulnerable to `Directory Traversal`, which may allow access to sensitive files and data on the server. \r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.2 or higher.\r\n\r\n## References\r\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\r\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\r\n- [Github Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)",
        "disclosureTime": "2017-01-17T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-23"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "httpclient",
          "groupId": "org.apache.httpcomponents"
        },
        "methods": [
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T10:32:17.893248Z",
        "moduleName": "org.apache.httpcomponents:httpclient",
        "packageManager": "maven",
        "packageName": "org.apache.httpcomponents:httpclient",
        "patches": [],
        "publicationTime": "2017-09-20T00:00:00Z",
        "references": [
          {
            "title": "Researcher blog post",
            "url": "http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/HTTPCLIENT-1803"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.5.2)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "spotify/docker-client@spotify/docker-client",
          "org.apache.httpcomponents:httpclient@4.5"
        ],
        "upgradePath": [
          false,
          "org.apache.httpcomponents:httpclient@4.5.2"
        ],
        "version": "4.5",
        "name": "org.apache.httpcomponents:httpclient",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-01-17T07:28:21.802000Z",
        "credit": [
          "James Kettle"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.httpcomponents:httpclient`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22httpclient%22) is HttpClient component of the Apache HttpComponents project.\r\n\r\nAffected versions of the package are vulnerable to `Directory Traversal`, which may allow access to sensitive files and data on the server. \r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.2 or higher.\r\n\r\n## References\r\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\r\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\r\n- [Github Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)",
        "disclosureTime": "2017-01-17T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-23"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "httpclient",
          "groupId": "org.apache.httpcomponents"
        },
        "methods": [
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T10:32:17.893248Z",
        "moduleName": "org.apache.httpcomponents:httpclient",
        "packageManager": "maven",
        "packageName": "org.apache.httpcomponents:httpclient",
        "patches": [],
        "publicationTime": "2017-09-20T00:00:00Z",
        "references": [
          {
            "title": "Researcher blog post",
            "url": "http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/HTTPCLIENT-1803"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.5.2)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "spotify/docker-client@spotify/docker-client",
          "org.glassfish.jersey.connectors:jersey-apache-connector@2.22.2",
          "org.apache.httpcomponents:httpclient@4.5"
        ],
        "upgradePath": [
          false,
          false,
          "org.apache.httpcomponents:httpclient@4.5.2"
        ],
        "version": "4.5",
        "name": "org.apache.httpcomponents:httpclient",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-01-17T07:28:21.802000Z",
        "credit": [
          "James Kettle"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.httpcomponents:httpclient`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22httpclient%22) is HttpClient component of the Apache HttpComponents project.\r\n\r\nAffected versions of the package are vulnerable to `Directory Traversal`, which may allow access to sensitive files and data on the server. \r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.2 or higher.\r\n\r\n## References\r\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\r\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\r\n- [Github Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)",
        "disclosureTime": "2017-01-17T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-23"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "httpclient",
          "groupId": "org.apache.httpcomponents"
        },
        "methods": [
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T10:32:17.893248Z",
        "moduleName": "org.apache.httpcomponents:httpclient",
        "packageManager": "maven",
        "packageName": "org.apache.httpcomponents:httpclient",
        "patches": [],
        "publicationTime": "2017-09-20T00:00:00Z",
        "references": [
          {
            "title": "Researcher blog post",
            "url": "http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/HTTPCLIENT-1803"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.5.2)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "spotify/docker-client@spotify/docker-client",
          "com.google.auth:google-auth-library-oauth2-http@0.6.0",
          "com.google.http-client:google-http-client@1.19.0",
          "org.apache.httpcomponents:httpclient@4.5"
        ],
        "upgradePath": [
          false,
          "com.google.auth:google-auth-library-oauth2-http@0.11.0",
          "com.google.http-client:google-http-client@1.24.1",
          "org.apache.httpcomponents:httpclient@4.5.3"
        ],
        "version": "4.5",
        "name": "org.apache.httpcomponents:httpclient",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-01-17T07:28:21.802000Z",
        "credit": [
          "James Kettle"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.httpcomponents:httpclient`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22httpclient%22) is HttpClient component of the Apache HttpComponents project.\r\n\r\nAffected versions of the package are vulnerable to `Directory Traversal`, which may allow access to sensitive files and data on the server. \r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.2 or higher.\r\n\r\n## References\r\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\r\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\r\n- [Github Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)",
        "disclosureTime": "2017-01-17T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-23"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "httpclient",
          "groupId": "org.apache.httpcomponents"
        },
        "methods": [
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T10:32:17.893248Z",
        "moduleName": "org.apache.httpcomponents:httpclient",
        "packageManager": "maven",
        "packageName": "org.apache.httpcomponents:httpclient",
        "patches": [],
        "publicationTime": "2017-09-20T00:00:00Z",
        "references": [
          {
            "title": "Researcher blog post",
            "url": "http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/HTTPCLIENT-1803"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.5.2)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "spotify/docker-client@spotify/docker-client",
          "com.google.auth:google-auth-library-oauth2-http@0.6.0",
          "com.google.http-client:google-http-client-jackson2@1.19.0",
          "com.google.http-client:google-http-client@1.19.0",
          "org.apache.httpcomponents:httpclient@4.5"
        ],
        "upgradePath": [
          false,
          "com.google.auth:google-auth-library-oauth2-http@0.11.0",
          "com.google.http-client:google-http-client-jackson2@1.24.1",
          "com.google.http-client:google-http-client@1.24.1",
          "org.apache.httpcomponents:httpclient@4.5.3"
        ],
        "version": "4.5",
        "name": "org.apache.httpcomponents:httpclient",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 54,
    "severityMap": {
      "high": 0,
      "medium": 2,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "6 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 2,
    "path": "https://github.com/spotify/docker-client"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 10,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/logstash/logstash-logback-encoder"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jknack/handlebars.java.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8557e7d5-2377-4ebb-89ac-92343c1c6587)",
    "path": "https://github.com/swaldman/c3p0"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/google/google-http-java-client.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e67477dc-0e1f-48d1-8f14-9e6fbcc033e9)",
    "path": "scm:git:https://github.com/google/google-http-java-client.git/google-http-client-jackson2"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d13124db-46b9-42cf-8538-5db78eac099b)",
    "path": "scm:git:git@github.com:infinispan/infinispan.git/infinispan-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: aa2d561e-d52e-4cec-b5d2-534b1b90c171)",
    "path": "https://github.com/vigna/fastutil"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5c845352-c9e3-4b00-b7a9-fc69009cd5cf)",
    "path": "scm:git:https://github.com/fusesource/jansi.git/jansi"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/skyscreamer/JSONassert"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/uniVocity/univocity-parsers"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 7,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-module-kotlin"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/google/google-oauth-java-client.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jqno/equalsverifier"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 24328e96-100e-4068-a6f4-dec9f0f12c4c)",
    "path": "scm:git:https://github.com/easymock/objenesis.git/objenesis"
  },
  {
    "ok": false,
    "error": "Internal error (reference: ff31e9c6-e8d4-4c47-ba44-9b99726a6686)",
    "path": "https://github.com/FasterXML/jackson-jaxrs-json-provider"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/JodaOrg/joda-convert"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/beanvalidation/beanvalidation-api"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/webjars/bootstrap"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/vuejs/vue"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/angular/angular.js"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/lodash/lodash"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0516b62d-5356-4b27-8742-d62a45bdf6b1)",
    "path": "https://github.com/google/protobuf"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/babel/babel"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/SpringSource/spring-framework"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/JakeWharton/butterknife"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/greenrobot/EventBus"
  },
  {
    "ok": false,
    "error": "Internal error (reference: ee49b396-d11f-44b2-84d8-0f7c267a2a13)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-transport-native-epoll"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5d027772-b818-410e-a926-aea9227288d5)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-buffer"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 69a28783-4b03-4b6f-b43e-9ef1bd82796c)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-handler"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a7417f54-098b-41ad-89a7-4686a8c90deb)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-common"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 994be9de-7a50-46c2-a834-016bc82ad6a6)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-codec-http"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2bb45fa6-e1ef-4102-b821-883a03227650)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-codec"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8ce93fac-5846-4d38-9bc1-c9498ff001b1)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-transport"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git@github.com:nostra13/Android-Universal-Image-Loader.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/facebook/fresco"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/playframework/playframework"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/facebook/stetho"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/akka/akka"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 49164502-3bec-4cc2-8c7e-78551b11f2a4)",
    "path": "ssh://git@github.com:JetBrains/intellij-community.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 737554c7-fdd5-4236-8bb5-37772d411782)",
    "path": "scm:git:git://github.com/google/guice.git/extensions-parent/guice-multibindings"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Netflix/eureka"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7a0226aa-022a-47b5-89d8-9674dd29000f)",
    "path": "scm:git:git://github.com/dropwizard/dropwizard.git/dropwizard-servlets"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/codecentric/spring-boot-admin"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d02c66d3-613c-4583-aa9c-9c89088b6b42)",
    "path": "scm:git:git://github.com/square/javawriter.git"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "pagehelper/Mybatis-PageHelper@pagehelper/Mybatis-PageHelper",
          "com.google.guava:guava@19.0"
        ],
        "upgradePath": [
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "19.0",
        "name": "com.google.guava:guava",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 3,
    "severityMap": {
      "high": 0,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "1 vulnerable dependency path",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/pagehelper/Mybatis-PageHelper"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "git://github.com/koush/ion.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b654c649-6a21-4ef4-8426-4927151642d0)",
    "path": "scm:git:git://github.com/antlr/antlr4.git/antlr4"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:AsyncHttpClient/async-http-client.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/google/error-prone.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mikepenz/Android-Iconics"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 73895780-6ac9-477d-89f8-b560bb6c7099)",
    "path": "http://kryo.googlecode.com/svn/"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 6d535965-8241-4f45-bdda-e5ddc40c0b28)",
    "path": "scm:git:git@github.com:orientechnologies/orientdb.git/orientdb-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5be69893-286f-4039-9f50-f4b7dd69f3ed)",
    "path": "https://github.com/hibernate/hibernate-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2e63c2de-1a56-4227-aac6-da15c8cd4e2a)",
    "path": "scm:git:git://github.com/jayway/JsonPath.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 25,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/puniverse/quasar"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/abel533/Mapper"
  },
  {
    "ok": false,
    "error": "Internal error (reference: dc517dfa-0c00-41b4-b190-13be5788efd0)",
    "path": "scm:git:git@github.com:johncarl81/parceler.git/parceler-api"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 18,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jankotek/MapDB"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/hazelcast/hazelcast.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mybatis/spring-boot-starter"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 82c34125-31c9-47ed-a1d7-769f6d000433)",
    "path": "scm:git://github.com/undertow-io/undertow.git/undertow-servlet"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 156989a7-b5f4-409d-b6ae-bb27356fdd49)",
    "path": "scm:git://github.com/undertow-io/undertow.git/undertow-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 088e2c16-5da8-4327-86e1-445b14a973d7)",
    "path": "scm:git:https://github.com/immutables/immutables.git/value"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0f83d92f-584d-48e8-b975-8d8f6f45dfcb)",
    "path": "scm:git:https://github.com:droolsjbpm/drools.git/drools-compiler"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mozilla/rhino"
  },
  {
    "ok": false,
    "error": "Internal error (reference: fa741ef4-e656-4c6a-8999-4773ffca2c4b)",
    "path": "scm:git:git://github.com/cucumber/cucumber-jvm.git/cucumber-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/detro/ghostdriver"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 1a42dde3-1977-4a73-879e-72c98ae94a95)",
    "path": "scm:git:git@github.com:pac4j/pac4j.git/pac4j-http"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 155a29a0-d7e0-47d7-bdb5-ce8a587ddfca)",
    "path": "scm:git:git@github.com:pac4j/pac4j.git/pac4j-saml"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b3374dff-2216-48fe-bb6a-a72827ed98a8)",
    "path": "https://github.com/ParsePlatform/Parse-SDK-Androidd"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:18.550000Z",
        "credit": [
          "guykoth"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n[`com.thoughtworks.xstream:xstream`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xstream%22) is a simple library to serialize objects to XML and back again.\r\nMultiple XML external entity (XXE) vulnerabilities in the (1) Dom4JDriver, (2) DomDriver, (3) JDomDriver, (4) JDom2Driver, (5) SjsxpDriver, (6) StandardStaxDriver, and (7) WstxDriver drivers in XStream before 1.4.9 allow remote attackers to read arbitrary files via a crafted XML document.\r\n\r\n## Details\r\n\r\nXXE Injection is a type of attack against an application that parses XML input.\r\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\r\n\r\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\r\n\r\nFor example, below is a sample XML document, containing an XML element- username.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n   <username>John</username>\r\n</xml>\r\n```\r\n\r\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!DOCTYPE foo [\r\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\r\n   <username>&xxe;</username>\r\n</xml>\r\n```\r\n\r\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3674)\r\n- [OSS Security](http://www.openwall.com/lists/oss-security/2016/03/28/1)\r\n- [GitHub Issue](https://github.com/x-stream/xstream/issues/25)",
        "disclosureTime": "2016-03-20T22:26:12Z",
        "functions": [
          {
            "functionId": {
              "className": "Dom4JDriver",
              "filePath": "com/thoughtworks/xstream/io/xml/Dom4JDriver.java",
              "functionName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          },
          {
            "functionId": {
              "className": "DomDriver",
              "filePath": "com/thoughtworks/xstream/io/xml/DomDriver.java",
              "functionName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          },
          {
            "functionId": {
              "className": "JDom2Driver",
              "filePath": "com/thoughtworks/xstream/io/xml/JDom2Driver.java",
              "functionName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          },
          {
            "functionId": {
              "className": "JDomDriver",
              "filePath": "com/thoughtworks/xstream/io/xml/JDomDriver.java",
              "functionName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-30385",
        "identifiers": {
          "CVE": [
            "CVE-2016-3674"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xstream",
          "groupId": "com.thoughtworks.xstream"
        },
        "methods": [
          {
            "methodId": {
              "className": "Dom4JDriver",
              "filePath": "com/thoughtworks/xstream/io/xml/Dom4JDriver.java",
              "methodName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          },
          {
            "methodId": {
              "className": "DomDriver",
              "filePath": "com/thoughtworks/xstream/io/xml/DomDriver.java",
              "methodName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          },
          {
            "methodId": {
              "className": "JDom2Driver",
              "filePath": "com/thoughtworks/xstream/io/xml/JDom2Driver.java",
              "methodName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          },
          {
            "methodId": {
              "className": "JDomDriver",
              "filePath": "com/thoughtworks/xstream/io/xml/JDomDriver.java",
              "methodName": "createReader"
            },
            "version": [
              "[0.5 ,1.4.9)"
            ]
          }
        ],
        "modificationTime": "2019-03-20T13:32:05.945331Z",
        "moduleName": "com.thoughtworks.xstream:xstream",
        "packageManager": "maven",
        "packageName": "com.thoughtworks.xstream:xstream",
        "patches": [],
        "publicationTime": "2016-03-20T22:26:12Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3674"
          },
          {
            "title": "OSS Security",
            "url": "http://www.openwall.com/lists/oss-security/2016/03/28/1"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/x-stream/xstream/issues/25"
          },
          {
            "title": "GitHub Commit JDom",
            "url": "https://github.com/x-stream/xstream/commit/696ec886a23dae880cf12e34e1fe09c5df8fe946"
          },
          {
            "title": "GitHub Commit Dom4JDriver",
            "url": "https://github.com/x-stream/xstream/commit/5b5cd6d8137f645c5d57b648afb1a305967aa7f4"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0.3 ,1.4.9)"
          ]
        },
        "severity": "high",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "groovy/groovy-core@groovy/groovy-core",
          "com.thoughtworks.xstream:xstream@1.4.7"
        ],
        "upgradePath": [
          false,
          "com.thoughtworks.xstream:xstream@1.4.9"
        ],
        "version": "1.4.7",
        "name": "com.thoughtworks.xstream:xstream",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-05-17T12:10:22.458000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n[`com.thoughtworks.xstream:xstream`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xstream%22) is a simple library to serialize objects to XML and back again.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service attacks. When a certain denyTypes workaround is not used, mishandles attempts to create an instance of the primitive type 'void' during unmarshalling, leading to a remote application crash, as demonstrated by an `xstream.fromXML(\"&lt;void/>\")` call.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade to version `1.4.10` or higher for `com.thoughtworks.xstream:xstream`.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7957)\r\n- [Vendor Advisory](http://x-stream.github.io/CVE-2017-7957.html)",
        "disclosureTime": "2017-05-02T03:07:21Z",
        "functions": [],
        "id": "SNYK-JAVA-COMTHOUGHTWORKSXSTREAM-31394",
        "identifiers": {
          "CVE": [
            "CVE-2017-7957"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xstream",
          "groupId": "com.thoughtworks.xstream"
        },
        "methods": [],
        "modificationTime": "2018-12-05T17:56:34.643763Z",
        "moduleName": "com.thoughtworks.xstream:xstream",
        "packageManager": "maven",
        "packageName": "com.thoughtworks.xstream:xstream",
        "patches": [],
        "publicationTime": "2017-05-21T07:52:36Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7957"
          },
          {
            "title": "Vendor Advisory",
            "url": "http://x-stream.github.io/CVE-2017-7957.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.4.9]"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "groovy/groovy-core@groovy/groovy-core",
          "com.thoughtworks.xstream:xstream@1.4.7"
        ],
        "upgradePath": [
          false,
          "com.thoughtworks.xstream:xstream@1.4.10"
        ],
        "version": "1.4.7",
        "name": "com.thoughtworks.xstream:xstream",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 19,
    "severityMap": {
      "high": 2,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "2 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 2,
    "path": "https://github.com/groovy/groovy-core"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "docker-java/docker-java@docker-java/docker-java",
          "com.google.guava:guava@19.0"
        ],
        "upgradePath": [
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "19.0",
        "name": "com.google.guava:guava",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 55,
    "severityMap": {
      "high": 0,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "1 vulnerable dependency path",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/docker-java/docker-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5403d164-8407-41b7-b304-dd56de599e97)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-ext"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`commons-collections:commons-collections`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-collections%22)\nApache commons-collections library permitted code execution when deserializing objects involving a specially constructed chain of classes. A remote attacker could use this flaw to execute arbitrary code with the permissions of the application using the commons-collections library.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n \nThe vulnerability, also know as _Mad Gadget_ \n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google \n\n\n## References\n- [breenmachine Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n",
        "disclosureTime": "2015-11-06T16:51:56Z",
        "functions": [
          {
            "functionId": {
              "className": "InvokerTransformer",
              "filePath": "org/apache/commons/collections/functors/InvokerTransformer.java",
              "functionName": "transform"
            },
            "version": [
              "[3,3.2.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
        "identifiers": {
          "CVE": [
            "CVE-2015-7501"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-collections",
          "groupId": "commons-collections"
        },
        "methods": [
          {
            "methodId": {
              "className": "InvokerTransformer",
              "filePath": "org/apache/commons/collections/functors/InvokerTransformer.java",
              "methodName": "transform"
            },
            "version": [
              "[3,3.2.2)"
            ]
          }
        ],
        "modificationTime": "2018-11-22T10:10:08.571223Z",
        "moduleName": "commons-collections:commons-collections",
        "packageManager": "maven",
        "packageName": "commons-collections:commons-collections",
        "patches": [],
        "publicationTime": "2015-11-06T16:51:56Z",
        "references": [
          {
            "title": "breenmachine Blog",
            "url": "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3,3.2.2)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "SpringSource/spring-data-redis@SpringSource/spring-data-redis",
          "commons-beanutils:commons-beanutils@1.9.2",
          "commons-collections:commons-collections@3.2.1"
        ],
        "upgradePath": [
          false,
          "commons-beanutils:commons-beanutils@1.9.3",
          "commons-collections:commons-collections@3.2.2"
        ],
        "version": "3.2.1",
        "name": "commons-collections:commons-collections",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 38,
    "severityMap": {
      "high": 1,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "1 vulnerable dependency path",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/SpringSource/spring-data-redis"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/resteasy/Resteasy.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 873d0b41-7fa8-48a1-a2bd-d3931a1f9c2a)",
    "path": "scm:git:git://github.com/resteasy/Resteasy.git/resteasy-jaxrs"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/resteasy/Resteasy"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f363987a-975d-458c-8210-e1ec9c36c4ec)",
    "path": "scm:git:git@github.com:prometheus/client_java.git/simpleclient"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 97af9a1a-1807-427b-8bea-42e7feb1f84a)",
    "path": "scm:git:git://github.com/mulesoft/mule.git/mule-tests/mule-tests-functional"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-21T09:36:25.505000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\nAffected versions of [`org.scala-lang:scala-compiler`](https://scala-lang.org) are vulnerable to Arbitrary Code Execution.\n\nThe compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.\n\n## Remediation\nUpgrade `org.scala-lang:scala-compiler` to version 2.12.4 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-15288)\n- [GitHub PR #1](https://github.com/scala/scala/pull/6108)\n- [GitHub PR #2](https://github.com/scala/scala/pull/6120)\n- [GitHub PR #3](https://github.com/scala/scala/pull/6128)\n- [GitHub Commit #1](https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f)\n- [GitHub Commit #2](https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757)\n- [GitHub Commit #3](https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f)\n",
        "disclosureTime": "2017-10-02T21:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGSCALALANG-31592",
        "identifiers": {
          "CVE": [
            "CVE-2017-15288"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "scala-compiler",
          "groupId": "org.scala-lang"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.946109Z",
        "moduleName": "org.scala-lang:scala-compiler",
        "packageManager": "maven",
        "packageName": "org.scala-lang:scala-compiler",
        "patches": [],
        "publicationTime": "2017-11-28T14:47:22.036000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-15288"
          },
          {
            "title": "GitHub PR #1",
            "url": "https://github.com/scala/scala/pull/6108"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/scala/scala/pull/6120"
          },
          {
            "title": "GitHub PR #3",
            "url": "https://github.com/scala/scala/pull/6128"
          },
          {
            "title": "GitHub Commit #1",
            "url": "https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f"
          },
          {
            "title": "GitHub Commit #2",
            "url": "https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757"
          },
          {
            "title": "GitHub Commit #3",
            "url": "https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.7),[2.11,2.11.12),[2.12,2.12.4)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "etorreborre/specs2@etorreborre/specs2",
          "org.specs2:specs2-analysis_2.12@4.0.0-RC1",
          "org.scala-lang:scala-compiler@2.12.3"
        ],
        "upgradePath": [
          false,
          "org.specs2:specs2-analysis_2.12@4.3.0",
          "org.scala-lang:scala-compiler@2.12.6"
        ],
        "version": "2.12.3",
        "name": "org.scala-lang:scala-compiler",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-21T09:36:25.505000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\nAffected versions of [`org.scala-lang:scala-compiler`](https://scala-lang.org) are vulnerable to Arbitrary Code Execution.\n\nThe compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.\n\n## Remediation\nUpgrade `org.scala-lang:scala-compiler` to version 2.12.4 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-15288)\n- [GitHub PR #1](https://github.com/scala/scala/pull/6108)\n- [GitHub PR #2](https://github.com/scala/scala/pull/6120)\n- [GitHub PR #3](https://github.com/scala/scala/pull/6128)\n- [GitHub Commit #1](https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f)\n- [GitHub Commit #2](https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757)\n- [GitHub Commit #3](https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f)\n",
        "disclosureTime": "2017-10-02T21:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGSCALALANG-31592",
        "identifiers": {
          "CVE": [
            "CVE-2017-15288"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "scala-compiler",
          "groupId": "org.scala-lang"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.946109Z",
        "moduleName": "org.scala-lang:scala-compiler",
        "packageManager": "maven",
        "packageName": "org.scala-lang:scala-compiler",
        "patches": [],
        "publicationTime": "2017-11-28T14:47:22.036000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-15288"
          },
          {
            "title": "GitHub PR #1",
            "url": "https://github.com/scala/scala/pull/6108"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/scala/scala/pull/6120"
          },
          {
            "title": "GitHub PR #3",
            "url": "https://github.com/scala/scala/pull/6128"
          },
          {
            "title": "GitHub Commit #1",
            "url": "https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f"
          },
          {
            "title": "GitHub Commit #2",
            "url": "https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757"
          },
          {
            "title": "GitHub Commit #3",
            "url": "https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.7),[2.11,2.11.12),[2.12,2.12.4)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "etorreborre/specs2@etorreborre/specs2",
          "org.specs2:specs2-matcher-extra_2.12@4.0.0-RC1",
          "org.specs2:specs2-analysis_2.12@4.0.0-RC1",
          "org.scala-lang:scala-compiler@2.12.3"
        ],
        "upgradePath": [
          false,
          "org.specs2:specs2-matcher-extra_2.12@4.3.0",
          "org.specs2:specs2-analysis_2.12@4.3.0",
          "org.scala-lang:scala-compiler@2.12.6"
        ],
        "version": "2.12.3",
        "name": "org.scala-lang:scala-compiler",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-21T09:36:25.505000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\nAffected versions of [`org.scala-lang:scala-compiler`](https://scala-lang.org) are vulnerable to Arbitrary Code Execution.\n\nThe compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.\n\n## Remediation\nUpgrade `org.scala-lang:scala-compiler` to version 2.12.4 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-15288)\n- [GitHub PR #1](https://github.com/scala/scala/pull/6108)\n- [GitHub PR #2](https://github.com/scala/scala/pull/6120)\n- [GitHub PR #3](https://github.com/scala/scala/pull/6128)\n- [GitHub Commit #1](https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f)\n- [GitHub Commit #2](https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757)\n- [GitHub Commit #3](https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f)\n",
        "disclosureTime": "2017-10-02T21:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGSCALALANG-31592",
        "identifiers": {
          "CVE": [
            "CVE-2017-15288"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "scala-compiler",
          "groupId": "org.scala-lang"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.946109Z",
        "moduleName": "org.scala-lang:scala-compiler",
        "packageManager": "maven",
        "packageName": "org.scala-lang:scala-compiler",
        "patches": [],
        "publicationTime": "2017-11-28T14:47:22.036000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-15288"
          },
          {
            "title": "GitHub PR #1",
            "url": "https://github.com/scala/scala/pull/6108"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/scala/scala/pull/6120"
          },
          {
            "title": "GitHub PR #3",
            "url": "https://github.com/scala/scala/pull/6128"
          },
          {
            "title": "GitHub Commit #1",
            "url": "https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f"
          },
          {
            "title": "GitHub Commit #2",
            "url": "https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757"
          },
          {
            "title": "GitHub Commit #3",
            "url": "https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.7),[2.11,2.11.12),[2.12,2.12.4)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "etorreborre/specs2@etorreborre/specs2",
          "org.specs2:specs2-form_2.12@4.0.0-RC1",
          "org.specs2:specs2-matcher-extra_2.12@4.0.0-RC1",
          "org.specs2:specs2-analysis_2.12@4.0.0-RC1",
          "org.scala-lang:scala-compiler@2.12.3"
        ],
        "upgradePath": [
          false,
          "org.specs2:specs2-form_2.12@4.3.0",
          "org.specs2:specs2-matcher-extra_2.12@4.3.0",
          "org.specs2:specs2-analysis_2.12@4.3.0",
          "org.scala-lang:scala-compiler@2.12.6"
        ],
        "version": "2.12.3",
        "name": "org.scala-lang:scala-compiler",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-21T09:36:25.505000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\nAffected versions of [`org.scala-lang:scala-compiler`](https://scala-lang.org) are vulnerable to Arbitrary Code Execution.\n\nThe compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.\n\n## Remediation\nUpgrade `org.scala-lang:scala-compiler` to version 2.12.4 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-15288)\n- [GitHub PR #1](https://github.com/scala/scala/pull/6108)\n- [GitHub PR #2](https://github.com/scala/scala/pull/6120)\n- [GitHub PR #3](https://github.com/scala/scala/pull/6128)\n- [GitHub Commit #1](https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f)\n- [GitHub Commit #2](https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757)\n- [GitHub Commit #3](https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f)\n",
        "disclosureTime": "2017-10-02T21:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGSCALALANG-31592",
        "identifiers": {
          "CVE": [
            "CVE-2017-15288"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "scala-compiler",
          "groupId": "org.scala-lang"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.946109Z",
        "moduleName": "org.scala-lang:scala-compiler",
        "packageManager": "maven",
        "packageName": "org.scala-lang:scala-compiler",
        "patches": [],
        "publicationTime": "2017-11-28T14:47:22.036000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-15288"
          },
          {
            "title": "GitHub PR #1",
            "url": "https://github.com/scala/scala/pull/6108"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/scala/scala/pull/6120"
          },
          {
            "title": "GitHub PR #3",
            "url": "https://github.com/scala/scala/pull/6128"
          },
          {
            "title": "GitHub Commit #1",
            "url": "https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f"
          },
          {
            "title": "GitHub Commit #2",
            "url": "https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757"
          },
          {
            "title": "GitHub Commit #3",
            "url": "https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.7),[2.11,2.11.12),[2.12,2.12.4)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "etorreborre/specs2@etorreborre/specs2",
          "org.specs2:specs2-gwt_2.12@4.0.0-RC1",
          "org.specs2:specs2-matcher-extra_2.12@4.0.0-RC1",
          "org.specs2:specs2-analysis_2.12@4.0.0-RC1",
          "org.scala-lang:scala-compiler@2.12.3"
        ],
        "upgradePath": [
          false,
          "org.specs2:specs2-gwt_2.12@4.3.0",
          "org.specs2:specs2-matcher-extra_2.12@4.3.0",
          "org.specs2:specs2-analysis_2.12@4.3.0",
          "org.scala-lang:scala-compiler@2.12.6"
        ],
        "version": "2.12.3",
        "name": "org.scala-lang:scala-compiler",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-21T09:36:25.505000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\nAffected versions of [`org.scala-lang:scala-compiler`](https://scala-lang.org) are vulnerable to Arbitrary Code Execution.\n\nThe compilation daemon in Scala before 2.10.7, 2.11.x before 2.11.12, and 2.12.x before 2.12.4 uses weak permissions for private files in /tmp/scala-devel/${USER:shared}/scalac-compile-server-port, which allows local users to write to arbitrary class files and consequently gain privileges.\n\n## Remediation\nUpgrade `org.scala-lang:scala-compiler` to version 2.12.4 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-15288)\n- [GitHub PR #1](https://github.com/scala/scala/pull/6108)\n- [GitHub PR #2](https://github.com/scala/scala/pull/6120)\n- [GitHub PR #3](https://github.com/scala/scala/pull/6128)\n- [GitHub Commit #1](https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f)\n- [GitHub Commit #2](https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757)\n- [GitHub Commit #3](https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f)\n",
        "disclosureTime": "2017-10-02T21:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGSCALALANG-31592",
        "identifiers": {
          "CVE": [
            "CVE-2017-15288"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "scala-compiler",
          "groupId": "org.scala-lang"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.946109Z",
        "moduleName": "org.scala-lang:scala-compiler",
        "packageManager": "maven",
        "packageName": "org.scala-lang:scala-compiler",
        "patches": [],
        "publicationTime": "2017-11-28T14:47:22.036000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-15288"
          },
          {
            "title": "GitHub PR #1",
            "url": "https://github.com/scala/scala/pull/6108"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/scala/scala/pull/6120"
          },
          {
            "title": "GitHub PR #3",
            "url": "https://github.com/scala/scala/pull/6128"
          },
          {
            "title": "GitHub Commit #1",
            "url": "https://github.com/scala/scala/commit/f3419fc358a8ea6e366538126279da88d4d1fb1f"
          },
          {
            "title": "GitHub Commit #2",
            "url": "https://github.com/scala/scala/commit/67fcf5ce4496000574676d81ed72e4a6cb9e7757"
          },
          {
            "title": "GitHub Commit #3",
            "url": "https://github.com/scala/scala/commit/0f624c5e5bdb39967e208c7c16067c3e6c903f1f"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.7),[2.11,2.11.12),[2.12,2.12.4)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "etorreborre/specs2@etorreborre/specs2",
          "org.specs2:specs2-html_2.12@4.0.0-RC1",
          "org.specs2:specs2-form_2.12@4.0.0-RC1",
          "org.specs2:specs2-matcher-extra_2.12@4.0.0-RC1",
          "org.specs2:specs2-analysis_2.12@4.0.0-RC1",
          "org.scala-lang:scala-compiler@2.12.3"
        ],
        "upgradePath": [
          false,
          "org.specs2:specs2-html_2.12@4.3.0",
          "org.specs2:specs2-form_2.12@4.3.0",
          "org.specs2:specs2-matcher-extra_2.12@4.3.0",
          "org.specs2:specs2-analysis_2.12@4.3.0",
          "org.scala-lang:scala-compiler@2.12.6"
        ],
        "version": "2.12.3",
        "name": "org.scala-lang:scala-compiler",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 37,
    "severityMap": {
      "high": 1,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "5 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/etorreborre/specs2"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/xerial/snappy-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/aws/aws-sdk-android"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/bobbylight/RSyntaxTextArea"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 3,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/antlr/stringtemplate4"
  },
  {
    "ok": false,
    "error": "Internal error (reference: af7f905d-26e0-496f-9105-fb5e653284f3)",
    "path": "scm:git:git@github.com:Jasig/java-cas-client.git/cas-client-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/javers/javers"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/rometools/rome"
  },
  {
    "ok": false,
    "error": "Internal error (reference: be71c140-1a32-4975-9ad3-2bdf58fadf26)",
    "path": "scm:git:git://github.com/codahale/metrics.git/metrics-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Azure/azure-sdk-for-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: cf8e061a-c924-4255-b7ac-ebc5359ef08a)",
    "path": "scm:git:git@github.com:weld/core.git/weld-servlet-parent/weld-servlet"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/pholser/jopt-simple"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 6,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/MariaDB/mariadb-connector-j"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/randomizedtesting/randomizedtesting.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9d2c24cb-5875-4719-9b3c-d120c6a6a510)",
    "path": "https://github.com/pmuir/cdi"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 4,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-datatype-joda"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 36,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/SeleniumHQ/htmlunit-driver"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 77980ff2-d418-437d-a289-934d820922b9)",
    "path": "scm:git:git://github.com/shrinkwrap/resolver.git/shrinkwrap-resolver-impl-maven"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jmock-developers/jmock-library"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-jaxrs-providers.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f32e876c-b999-4c44-9f94-77e6f2c23b3e)",
    "path": "http://dev.vaadin.com/git/?p=vaadin.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 3,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-datatypes-collections"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 96c00839-03ba-4643-b585-e0d67d3977d3)",
    "path": "https://git-wip-us.apache.org/repos/asf?p=commons-fileupload.git"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "@react-native-community/cli@2.0.0",
          "metro@0.53.1",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "@react-native-community/cli@2.0.0",
          "metro@0.53.1",
          "metro-inspector-proxy@0.53.1",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "@react-native-community/cli@2.0.0",
          "metro-config@0.53.1",
          "metro@0.53.1",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "@react-native-community/cli@2.0.0",
          "metro-config@0.53.1",
          "metro@0.53.1",
          "metro-inspector-proxy@0.53.1",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "@react-native-community/cli@2.0.0",
          "metro@0.53.1",
          "metro-config@0.53.1",
          "metro@0.53.1",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "react-native@facebook/react-native",
          "@react-native-community/cli@2.0.0",
          "metro@0.53.1",
          "metro-config@0.53.1",
          "metro@0.53.1",
          "metro-inspector-proxy@0.53.1",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 584,
    "severityMap": {
      "high": 0,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "7 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/facebook/react-native"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c498717c-0d8a-433c-814e-f9e5f1804cba)",
    "path": "https://github.com/FortAwesome/Font-Awesome"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H",
        "alternativeIds": [],
        "creationTime": "2019-03-27T08:43:07.568451Z",
        "credit": [
          "mgol"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n\r\n[jquery](https://www.npmjs.com/package/jquery) is a JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\r\n\r\n\r\nAffected versions of this package are vulnerable to Prototype Pollution.\r\nThe `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\r\n\r\n## Remediation\r\n\r\nA fix was pushed into the `master` branch but not yet published.\r\n\r\n\r\n## References\r\n\r\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\r\n\r\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\r\n",
        "disclosureTime": "2019-03-26T08:40:15Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "test/core.js",
              "functionName": "module.exports.jQuery.extend(Object, Object)"
            },
            "version": [
              "<=1.8.3"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "src/core.js",
              "functionName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">1.8.3 <=2.2.4"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "dist/core.js",
              "functionName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">2.2.4 <=3.3.1"
            ]
          }
        ],
        "id": "SNYK-JS-JQUERY-174006",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "test/core.js",
              "methodName": "module.exports.jQuery.extend(Object, Object)"
            },
            "version": [
              "<=1.8.3"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "src/core.js",
              "methodName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">1.8.3 <=2.2.4"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "dist/core.js",
              "methodName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">2.2.4 <=3.3.1"
            ]
          }
        ],
        "modificationTime": "2019-03-27T10:40:47.717527Z",
        "moduleName": "jquery",
        "packageManager": "npm",
        "packageName": "jquery",
        "patches": [],
        "publicationTime": "2019-03-27T08:40:08Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/4333"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "title": "Prototype Pollution",
        "from": [
          "angular-srcs@angular/angular",
          "jquery@3.0.0"
        ],
        "upgradePath": [],
        "version": "3.0.0",
        "name": "jquery",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-04-09T10:01:02.213229Z",
        "credit": [
          "lucianot54"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n\r\n[materialize-css](https://materializecss.com/) is a CSS Framework based on Material Design.\r\n\r\n\r\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\r\ndue to unescaped text being inserted into the Document Object Model (DOM). \r\n\r\nA vulnerability can arise when user input is provided to the `autocomplete` component. Typically \"safe\" data is used as part of this feature such as application links and urls. However there are cases where it may be reasonable to use user generated content. As such, this could allow a malicious user to pass a specially crafted JavaScript payload and render them within the element.\r\n\r\n## PoC\r\n```\r\n$('input.autocomplete').autocomplete({\r\n    data: {\r\n\t    \"Apple\": \"\\\"><IFRAME SRC=\\\"javascript:alert(document.cookie);\\\"></IFRAME>\",\r\n\t    \"Microsoft\": null,\r\n\t    \"Google\": 'https://placehold.it/250x250',\r\n    }\r\n});\r\n```\r\n\r\n## Details\r\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\r\n\r\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\r\n\r\nThere are a few types of XSS:\r\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\r\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\r\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\r\n\r\n\r\n## Remediation\r\n\r\nThere is no fixed version for `materialize-css`.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/Dogfalo/materialize/issues/6286)\r\n",
        "disclosureTime": "2019-04-08T18:59:17Z",
        "functions": [],
        "id": "SNYK-JS-MATERIALIZECSS-174144",
        "identifiers": {
          "CVE": [
            "CVE-2019-11003"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "methods": [],
        "modificationTime": "2019-04-09T13:06:58.455598Z",
        "moduleName": "materialize-css",
        "packageManager": "npm",
        "packageName": "materialize-css",
        "patches": [],
        "publicationTime": "2019-04-08T18:59:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/Dogfalo/materialize/issues/6286"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "angular-srcs@angular/angular",
          "materialize-css@1.0.0"
        ],
        "upgradePath": [],
        "version": "1.0.0",
        "name": "materialize-css",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-04-09T11:32:09.328516Z",
        "credit": [
          "lucianot54"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n\r\n[materialize-css](https://materializecss.com/) is a CSS Framework based on Material Design.\r\n\r\n\r\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\r\ndue to unescaped text being inserted into the Document Object Model (DOM). \r\n\r\n\r\nA vulnerability can arise when user input is provided to the `tooltip` component. Typically \"safe\" data is used as part of this feature such as application data generated server-side. However there are cases where it may be reasonable to use user generated content. As such, this could allow a malicious user to pass a specially crafted JavaScript payload and render them within the element.\r\n\r\n## PoC\r\n```\r\n<a class=\"btn tooltipped\" data-position=\"bottom\" data-tooltip=\"<IFRAME SRC='javascript:alert(document.cookie);'></IFRAME></script>\">Hover me!</a>\r\n```\r\n\r\n## Details\r\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\r\n\r\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\r\n\r\nThere are a few types of XSS:\r\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\r\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\r\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\r\n\r\n\r\n## Remediation\r\n\r\nThere is no fixed version for `materialize-css`.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/Dogfalo/materialize/issues/6286)\r\n",
        "disclosureTime": "2019-04-08T18:59:17Z",
        "functions": [],
        "id": "SNYK-JS-MATERIALIZECSS-174148",
        "identifiers": {
          "CVE": [
            "CVE-2019-11002"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "methods": [],
        "modificationTime": "2019-04-09T13:06:58.447773Z",
        "moduleName": "materialize-css",
        "packageManager": "npm",
        "packageName": "materialize-css",
        "patches": [],
        "publicationTime": "2019-04-09T18:59:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/Dogfalo/materialize/issues/6286"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "angular-srcs@angular/angular",
          "materialize-css@1.0.0"
        ],
        "upgradePath": [],
        "version": "1.0.0",
        "name": "materialize-css",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-BRACES-10900"
        ],
        "creationTime": "2018-02-19T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 15th, 2018 - Initial Disclosure to package owner\r\n* Feb 16th, 2018 - Initial Response from package owner\r\n* Feb 18th, 2018 - Fix issued\r\n* Feb 19th, 2018 - Vulnerability published\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade `braces` to version 2.3.1 or higher.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)",
        "disclosureTime": "2018-02-19T20:39:06Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/parsers.js",
              "functionName": "module.exports"
            },
            "version": [
              ">= 2.0.0 <2.3.1"
            ]
          }
        ],
        "id": "npm:braces:20180219",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACES-10900"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "NSP": [
            786
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "lib/parsers.js",
              "methodName": "module.exports"
            },
            "version": [
              ">= 2.0.0 <2.3.1"
            ]
          }
        ],
        "modificationTime": "2019-01-10T13:49:05.785001Z",
        "moduleName": "braces",
        "packageManager": "npm",
        "packageName": "braces",
        "patches": [],
        "publicationTime": "2018-02-19T16:32:28Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.3.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "angular-srcs@angular/angular",
          "@bazel/jasmine@0.27.10",
          "v8-coverage@1.0.8",
          "test-exclude@4.2.3",
          "micromatch@2.3.11",
          "braces@1.8.5"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "test-exclude@5.0.0"
        ],
        "version": "1.8.5",
        "name": "braces",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-BRACES-10900"
        ],
        "creationTime": "2018-02-19T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\r\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 15th, 2018 - Initial Disclosure to package owner\r\n* Feb 16th, 2018 - Initial Response from package owner\r\n* Feb 18th, 2018 - Fix issued\r\n* Feb 19th, 2018 - Vulnerability published\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade `braces` to version 2.3.1 or higher.\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)",
        "disclosureTime": "2018-02-19T20:39:06Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/parsers.js",
              "functionName": "module.exports"
            },
            "version": [
              ">= 2.0.0 <2.3.1"
            ]
          }
        ],
        "id": "npm:braces:20180219",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-BRACES-10900"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "NSP": [
            786
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "lib/parsers.js",
              "methodName": "module.exports"
            },
            "version": [
              ">= 2.0.0 <2.3.1"
            ]
          }
        ],
        "modificationTime": "2019-01-10T13:49:05.785001Z",
        "moduleName": "braces",
        "packageManager": "npm",
        "packageName": "braces",
        "patches": [],
        "publicationTime": "2018-02-19T16:32:28Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.3.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "angular-srcs@angular/angular",
          "karma@3.1.4",
          "expand-braces@0.1.2",
          "braces@0.1.5"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "braces@2.3.1"
        ],
        "version": "0.1.5",
        "name": "braces",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-JASMINECORE-10899"
        ],
        "creationTime": "2018-02-18T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`jasmine-core`](https://www.npmjs.com/package/jasmine-core) is a Behavior Driven Development testing framework for JavaScript. It does not rely on browsers, DOM, or any JavaScript framework.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*function\\s*(\\w*)\\s*\\(`) in order to parse JS `toString` output on a function to get a function name. This can cause an impact of about 10 seconds matching time for data 64K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 15th, 2018 - Initial Response from package owner\n* Feb 15th, 2018 - Fix issued, not yet published to npm.\n* Feb 18th, 2018 - Vulnerability published\n* Mar 1st, 2018 - Fix published to npm.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `jasmine-core` to version 3.1.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jasmine/jasmine/commit/3b77f3818846ea68bcdcd7b0b734b48cb1f69cc1)\n",
        "disclosureTime": "2018-02-16T20:39:06Z",
        "functions": [],
        "id": "npm:jasmine-core:20180216",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-JASMINECORE-10899"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.601404Z",
        "moduleName": "jasmine-core",
        "packageManager": "npm",
        "packageName": "jasmine-core",
        "patches": [],
        "publicationTime": "2018-02-18T15:02:40.153000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jasmine/jasmine/commit/3b77f3818846ea68bcdcd7b0b734b48cb1f69cc1"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "angular-srcs@angular/angular",
          "@bazel/karma@0.27.10",
          "jasmine-core@2.8.0"
        ],
        "upgradePath": [
          false,
          false,
          "jasmine-core@3.1.0"
        ],
        "version": "2.8.0",
        "name": "jasmine-core",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-JASMINECORE-10899"
        ],
        "creationTime": "2018-02-18T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`jasmine-core`](https://www.npmjs.com/package/jasmine-core) is a Behavior Driven Development testing framework for JavaScript. It does not rely on browsers, DOM, or any JavaScript framework.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*function\\s*(\\w*)\\s*\\(`) in order to parse JS `toString` output on a function to get a function name. This can cause an impact of about 10 seconds matching time for data 64K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 15th, 2018 - Initial Response from package owner\n* Feb 15th, 2018 - Fix issued, not yet published to npm.\n* Feb 18th, 2018 - Vulnerability published\n* Mar 1st, 2018 - Fix published to npm.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `jasmine-core` to version 3.1.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jasmine/jasmine/commit/3b77f3818846ea68bcdcd7b0b734b48cb1f69cc1)\n",
        "disclosureTime": "2018-02-16T20:39:06Z",
        "functions": [],
        "id": "npm:jasmine-core:20180216",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-JASMINECORE-10899"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.601404Z",
        "moduleName": "jasmine-core",
        "packageManager": "npm",
        "packageName": "jasmine-core",
        "patches": [],
        "publicationTime": "2018-02-18T15:02:40.153000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jasmine/jasmine/commit/3b77f3818846ea68bcdcd7b0b734b48cb1f69cc1"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.1.0"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "angular-srcs@angular/angular",
          "protractor@5.4.2",
          "jasmine@2.8.0",
          "jasmine-core@2.8.0"
        ],
        "upgradePath": [
          false,
          "protractor@6.0.0",
          "jasmine@3.3.1",
          "jasmine-core@3.3.0"
        ],
        "version": "2.8.0",
        "name": "jasmine-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "angular-srcs@angular/angular",
          "yargs@9.0.1",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-MEM-11138"
        ],
        "creationTime": "2018-01-17T18:19:13Z",
        "credit": [
          "juancampa"
        ],
        "cvssScore": 5.1,
        "description": "## Overview\r\n \r\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nOld results were deleted from the cache and could cause a memory leak.\r\n\r\n## details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\n\r\nUpgrade mem to version 4.0.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\r\n\r\n- [Github Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\r\n",
        "disclosureTime": "2018-01-17T18:19:13Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "id": "npm:mem:20180117",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MEM-11138"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized"
            },
            "version": [
              "<=1.1.0"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "index.js",
              "methodName": "module.exports.memoized.setData"
            },
            "version": [
              ">1.1.0<4.0.0"
            ]
          }
        ],
        "modificationTime": "2019-02-18T11:51:56.754978Z",
        "moduleName": "mem",
        "packageManager": "npm",
        "packageName": "mem",
        "patches": [],
        "publicationTime": "2018-08-29T11:23:09Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sindresorhus/mem/issues/14"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "angular-srcs@angular/angular",
          "@bazel/jasmine@0.27.10",
          "v8-coverage@1.0.8",
          "yargs@11.1.0",
          "os-locale@2.1.0",
          "mem@1.1.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "yargs@12.0.2",
          "os-locale@3.0.1",
          "mem@4.0.0"
        ],
        "version": "1.1.0",
        "name": "mem",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L",
        "alternativeIds": [
          "SNYK-JS-SHELLJS-10215"
        ],
        "creationTime": "2016-11-23T15:39:20.483000Z",
        "credit": [
          "Chris Corbyn"
        ],
        "cvssScore": 7,
        "description": "## Overview\n[`shelljs`](https://www.npmjs.com/package/shelljs) is a portable Unix shell commands for Node.js.\n\nAffected version of this package are vulnerable to Command Injection. It is possible to invoke commands from `shell.exec()` from external sources, allowing an attacker to inject arbitrary commands.  \n\n## Remediation\nThere is no fix version for `shelljs`.\n\n## References\n- [GitHub Issue #1](https://github.com/shelljs/shelljs/issues/143)\n- [GitHub Issue #2](https://github.com/shelljs/shelljs/issues/495)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/524)",
        "disclosureTime": "2014-07-22T21:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "src/exec.js",
              "functionName": "_exec"
            },
            "version": [
              ">0.1.4 <=0.8.3"
            ]
          }
        ],
        "id": "npm:shelljs:20140723",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-SHELLJS-10215"
          ],
          "CVE": [],
          "CWE": [
            "CWE-77"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "src/exec.js",
              "methodName": "_exec"
            },
            "version": [
              ">0.1.4 <=0.8.3"
            ]
          }
        ],
        "modificationTime": "2019-03-05T12:28:21.559862Z",
        "moduleName": "shelljs",
        "packageManager": "npm",
        "packageName": "shelljs",
        "patches": [],
        "publicationTime": "2017-02-13T15:39:20.483000Z",
        "references": [
          {
            "title": "GitHub Issue #1",
            "url": "https://github.com/shelljs/shelljs/issues/143"
          },
          {
            "title": "GitHub Issue #2",
            "url": "https://github.com/shelljs/shelljs/issues/495"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/shelljs/shelljs/pull/524"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "title": "Command Injection",
        "from": [
          "angular-srcs@angular/angular",
          "shelljs@0.8.3"
        ],
        "upgradePath": [],
        "version": "0.8.3",
        "name": "shelljs",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-VALIDATOR-10896"
        ],
        "creationTime": "2018-02-18T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`validator`](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`) in order to validate Data URIs. This can cause an impact of about 10 seconds matching time for data 70K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 18th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `validator` to version 9.4.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e)\n- [GitHub Changelog](https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941)",
        "disclosureTime": "2018-02-18T20:39:06Z",
        "functions": [],
        "id": "npm:validator:20180218",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-VALIDATOR-10896"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [],
        "modificationTime": "2018-11-22T10:10:06.770086Z",
        "moduleName": "validator",
        "packageManager": "npm",
        "packageName": "validator",
        "patches": [],
        "publicationTime": "2018-02-18T15:02:40.389000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e"
          },
          {
            "title": "GitHub Changelog",
            "url": "https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941"
          }
        ],
        "semver": {
          "vulnerable": [
            "<9.4.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "angular-srcs@angular/angular",
          "@microsoft/api-extractor@7.0.40",
          "@microsoft/node-core-library@3.13.0",
          "z-schema@3.18.4",
          "validator@8.2.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "z-schema@3.19.0",
          "validator@9.4.1"
        ],
        "version": "8.2.0",
        "name": "validator",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-VALIDATOR-10896"
        ],
        "creationTime": "2018-02-18T14:36:50Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[`validator`](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`) in order to validate Data URIs. This can cause an impact of about 10 seconds matching time for data 70K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 18th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `validator` to version 9.4.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e)\n- [GitHub Changelog](https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941)",
        "disclosureTime": "2018-02-18T20:39:06Z",
        "functions": [],
        "id": "npm:validator:20180218",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-VALIDATOR-10896"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [],
        "modificationTime": "2018-11-22T10:10:06.770086Z",
        "moduleName": "validator",
        "packageManager": "npm",
        "packageName": "validator",
        "patches": [],
        "publicationTime": "2018-02-18T15:02:40.389000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e"
          },
          {
            "title": "GitHub Changelog",
            "url": "https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941"
          }
        ],
        "semver": {
          "vulnerable": [
            "<9.4.1"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "angular-srcs@angular/angular",
          "@microsoft/api-extractor@7.0.40",
          "@microsoft/api-extractor-model@7.0.28",
          "@microsoft/node-core-library@3.13.0",
          "z-schema@3.18.4",
          "validator@8.2.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          false,
          "z-schema@3.19.0",
          "validator@9.4.1"
        ],
        "version": "8.2.0",
        "name": "validator",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 658,
    "severityMap": {
      "high": 1,
      "medium": 4,
      "low": 3
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "12 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 8,
    "path": "https://github.com/angular/angular"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:Netflix/RxJava.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 43f479f5-6350-4c08-8aec-101df6ba7da4)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-starters/spring-boot-starter-remote-shell"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 358b2ad8-1bee-4ea6-a1be-bd6b4a0bbf69)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-starters/spring-boot-starter-data-rest"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 05033de7-28d6-48a1-ba6d-aadb075e6146)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-starters/spring-boot-starter-redis"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 25e9683a-c2bf-4d6b-b21c-b60bbe5d4543)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-starters/spring-boot-starter-log4j"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 6a57be18-a30f-432c-b260-3a040b1145a3)",
    "path": "scm:git:git://github.com/square/retrofit.git/retrofit-converters/converter-jackson"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b8029793-3e9d-4f86-b19e-d5a76571795e)",
    "path": "scm:git:https://github.com/square/okhttp.git/okhttp-ws"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/square/leakcanary"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 41ba92ab-05b2-4c0d-9100-28366b353190)",
    "path": "scm:git:git@github.com:apache/spark.git/spark-catalyst_2.11"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:apache/spark.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a619f9e8-417e-4043-9376-80476246409e)",
    "path": "scm:git:git@github.com:apache/spark.git/spark-network-common_2.11"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f5fd2f97-d6c5-41ac-8fae-caf44dc28fa5)",
    "path": "scm:git:git://github.com/netty/netty.git/netty-resolver"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ReactiveX/RxJS"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/codemirror/CodeMirror"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f195e0f3-ff87-4bde-b456-b7d7bf1f4753)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-tools"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 3333b8a6-f47e-401a-92a7-3fae31c4e2c4)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-backend-android"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8904928f-67fc-469b-b9a9-40bb0aaad344)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-box2d-parent/gdx-box2d"
  },
  {
    "ok": false,
    "error": "Internal error (reference: aaa4ff6e-efe2-4756-9c5a-64eb119a2210)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-freetype"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7e4a8e2b-35ab-4167-96b5-e9a214da46c1)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-backend-lwjgl"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/angular-ui/ui-router"
  },
  {
    "ok": false,
    "error": "Internal error (reference: eb8db509-3c96-47c0-9cd6-bc258cee08e5)",
    "path": "scm:git:git://github.com/google/dagger.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 6,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/chalk/chalk"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d2daa7de-f054-42d8-8092-a05f53a83582)",
    "path": "scm:git:git://github.com/JakeWharton/Android-ViewPagerIndicator.git/library"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:akka/akka.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 5,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:brettwooldridge/HikariCP.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mrniko/redisson"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/JakeWharton/RxBinding"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mockito/mockito"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/wasabeef/recyclerview-animators"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a0453e9b-070a-4929-a1d6-3ce0a6dacac3)",
    "path": "scm:git:git://github.com/google/guice.git/extensions-parent/guice-grapher"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "Netflix/zuul@Netflix/zuul",
          "com.google.inject:guice@4.0",
          "com.google.guava:guava@16.0.1"
        ],
        "upgradePath": [
          false,
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "16.0.1",
        "name": "com.google.guava:guava",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 9,
    "severityMap": {
      "high": 0,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "1 vulnerable dependency path",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/Netflix/zuul"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/trello/RxLifecycle"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 02675711-91b5-44ef-82b9-fcd0b978c515)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-logback"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H",
        "alternativeIds": [],
        "creationTime": "2019-03-27T08:43:07.568451Z",
        "credit": [
          "mgol"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n\r\n[jquery](https://www.npmjs.com/package/jquery) is a JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\r\n\r\n\r\nAffected versions of this package are vulnerable to Prototype Pollution.\r\nThe `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\r\n\r\n## Remediation\r\n\r\nA fix was pushed into the `master` branch but not yet published.\r\n\r\n\r\n## References\r\n\r\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\r\n\r\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\r\n",
        "disclosureTime": "2019-03-26T08:40:15Z",
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "test/core.js",
              "functionName": "module.exports.jQuery.extend(Object, Object)"
            },
            "version": [
              "<=1.8.3"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "src/core.js",
              "functionName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">1.8.3 <=2.2.4"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "dist/core.js",
              "functionName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">2.2.4 <=3.3.1"
            ]
          }
        ],
        "id": "SNYK-JS-JQUERY-174006",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "methods": [
          {
            "methodId": {
              "className": null,
              "filePath": "test/core.js",
              "methodName": "module.exports.jQuery.extend(Object, Object)"
            },
            "version": [
              "<=1.8.3"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "src/core.js",
              "methodName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">1.8.3 <=2.2.4"
            ]
          },
          {
            "methodId": {
              "className": null,
              "filePath": "dist/core.js",
              "methodName": "jQuery.extend.jQuery.fn.extend"
            },
            "version": [
              ">2.2.4 <=3.3.1"
            ]
          }
        ],
        "modificationTime": "2019-03-27T10:40:47.717527Z",
        "moduleName": "jquery",
        "packageManager": "npm",
        "packageName": "jquery",
        "patches": [],
        "publicationTime": "2019-03-27T08:40:08Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/4333"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "title": "Prototype Pollution",
        "from": [
          "datatables@DataTables/DataTables",
          "jquery@3.3.1"
        ],
        "upgradePath": [],
        "version": "3.3.1",
        "name": "jquery",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "1 vulnerable dependency path",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/DataTables/DataTables"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/apereo/cas"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0a14dd3a-76c2-4427-af76-1ef720a9a58a)",
    "path": "scm:git:git@github.com:Jasig/cas.git/cas-server-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 53eb016c-1cf9-4957-9d94-d47b71a67876)",
    "path": "scm:git:git://github.com/square/otto.git/otto"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b8fd0212-184d-413b-b455-a96cd31db119)",
    "path": "scm:git:git@github.com:Activiti/Activiti.git/activiti-engine"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 055ea5d8-687e-429e-a183-bbb92d52d908)",
    "path": "scm:git:git@github.com:Activiti/Activiti.git/activiti-spring"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b042be24-d81f-4486-b4e7-c6262173cd2e)",
    "path": "scm:http://github.com/fernandezpablo85/scribe-java.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 64816a75-54e5-457e-83cf-23a0e2eabfdb)",
    "path": "https://github.com/baomidou/mybatis-plus"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/JakeWharton/DiskLruCache"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/gatling/gatling"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/BoltsFramework/Bolts-Android"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/looly/hutool"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:martypitt/swagger-springmvc.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 653dff83-1c0e-46ab-a71a-f67a7baa463a)",
    "path": "scm:git:git@jruby.org:jruby.git/jruby-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/oblac/jodd"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/reactive-streams/reactive-streams"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 3c6644a9-c32a-4e23-b0c9-62f6090df98e)",
    "path": "git@gitee.com:jfinal/jfinal.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9aa337c3-0759-4561-b910-f1989c5ccae0)",
    "path": "scm:git:git@github.com:timmolter/XChange.git/xchange-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/raphw/byte-buddy"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 67d905d6-9c2c-4289-b718-1f2f6676e417)",
    "path": "scm:git:git@github.com:spray/spray.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 5,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:milessabin/shapeless.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jhalterman/failsafe"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/reactor/reactor-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/LWJGL/lwjgl3"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2a8d1136-b653-4978-bcb2-967a5a252dc4)",
    "path": "scm:https://github.com/Netflix/archaius.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/igniterealtime/Smack"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 94676bbd-26d9-4d2b-9c0d-909d89a04bc6)",
    "path": "scm:git://github.com/ninjaframework/ninja.git/ninja-test-utilities"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/pac4j/pac4j.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 70f8149c-56a8-4b1e-9c0b-82274a253ab0)",
    "path": "scm:git:git@github.com:liferay/liferay-portal.git/util-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 52ffef01-7d64-40be-9bc7-9c1b08ffc77e)",
    "path": "scm:git:https://github.com/mongodb/morphia.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a15085b1-5130-4a60-aaf6-d9bcfdbe265f)",
    "path": "scm:git:git@github.com:tinkerpop/blueprints.git/blueprints-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 10,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Netflix/servo"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 7,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:sirthias/pegdown.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 791f3dc4-3489-43b9-9347-bc71c5b83bcb)",
    "path": "https://github.com/ehcache/ehcache3"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d43bf229-1df3-49e2-8006-5cd8058f9e9f)",
    "path": "git@github.com:qos-ch/slf4j.git/slf4j-jcl"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/datastax/java-driver"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8509fefa-3aed-4024-800f-2b4546507a4d)",
    "path": "scm:git:git@github.com:modelmapper/modelmapper.git/modelmapper"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:11:34.234921Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n",
        "disclosureTime": "2018-05-29T17:00:04Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
        "identifiers": {
          "CVE": [
            "CVE-2018-12022"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:54.614880Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:00:03Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2052"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:14:00.916831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n",
        "disclosureTime": "2018-05-10T17:10:58Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
        "identifiers": {
          "CVE": [
            "CVE-2018-11307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:14.778205Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:10:50Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2032"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:16:09.944095Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to zCVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/issues/2058)\n",
        "disclosureTime": "2018-05-29T17:15:50Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
        "identifiers": {
          "CVE": [
            "CVE-2018-12023"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:33.816672Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:15:49Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2058"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "msgpack/msgpack-java@msgpack/msgpack-java",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.11.1",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 4,
    "severityMap": {
      "high": 10,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "10 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 10,
    "path": "https://github.com/msgpack/msgpack-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 63654986-4459-43dc-975b-4dfaf46cec6f)",
    "path": "http://primefaces.googlecode.com/svn/primefaces/trunk"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/EsotericSoftware/reflectasm"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/aaberg/sql2o"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/akka/akka-http"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "SpringSource/spring-integration@SpringSource/spring-integration",
          "org.apache.curator:curator-recipes@4.1.0",
          "org.apache.curator:curator-framework@4.1.0",
          "org.apache.curator:curator-client@4.1.0",
          "com.google.guava:guava@20.0"
        ],
        "upgradePath": [
          false,
          "org.apache.curator:curator-recipes@4.2.0",
          "org.apache.curator:curator-framework@4.2.0",
          "org.apache.curator:curator-client@4.2.0",
          "com.google.guava:guava@27.0.1-jre"
        ],
        "version": "20.0",
        "name": "com.google.guava:guava",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.341000Z",
        "credit": [
          "David Jorm"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\nAffected versions of [`javax.servlet:jstl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jstl%22) are vulnerable to XML External Entity (XXE) Injection. It allowed the processing of untrusted XML documents to utilize external entity references, which could access resources on the host system and, potentially, allowing arbitrary code execution.\n\n## Details\n\nXXE Injection is a type of attack against an application that parses XML input.\r\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\r\n\r\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\r\n\r\nFor example, below is a sample XML document, containing an XML element- username.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n   <username>John</username>\r\n</xml>\r\n```\r\n\r\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!DOCTYPE foo [\r\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\r\n   <username>&xxe;</username>\r\n</xml>\r\n```\r\n\r\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade to a version `1.3` or above. \n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254)\n- [Redhat Security](https://access.redhat.com/security/cve/CVE-2015-0254)\n",
        "disclosureTime": "2015-02-27T16:13:27Z",
        "functions": [],
        "id": "SNYK-JAVA-JAVAXSERVLET-30449",
        "identifiers": {
          "CVE": [
            "CVE-2015-0254"
          ],
          "CWE": [
            "CWE-611"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jstl",
          "groupId": "javax.servlet"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:11.936075Z",
        "moduleName": "javax.servlet:jstl",
        "packageManager": "maven",
        "packageName": "javax.servlet:jstl",
        "patches": [],
        "publicationTime": "2015-02-27T16:13:27Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254"
          },
          {
            "title": "Redhat Security",
            "url": "https://access.redhat.com/security/cve/CVE-2015-0254"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.2]"
          ]
        },
        "severity": "high",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "SpringSource/spring-integration@SpringSource/spring-integration",
          "org.springframework.data:spring-data-geode@2.2.0.BUILD-SNAPSHOT",
          "org.apache.shiro:shiro-spring@1.3.2",
          "org.apache.shiro:shiro-web@1.3.2",
          "javax.servlet:jstl@1.1.2"
        ],
        "upgradePath": [],
        "version": "1.1.2",
        "name": "javax.servlet:jstl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-04-01T13:27:07.328394Z",
        "credit": [
          "tomsun28"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\r\n\r\n[org.apache.shiro:shiro-web](https://mvnrepository.com/artifact/org.apache.shiro/shiro-web) is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management.\r\n\r\n\r\nAffected versions of this package are vulnerable to Directory Traversal.\r\nThe `requestURI : /resource/menus` and `resource/menus/`  can both access the server resource, but the `pathPattern` match `/resource/menus` can not match `resource/menus/`.\r\nA user can use `requestURI + \"/\"` to simply bypass the chain filter, thereby bypassing shiro protect and gaining access to the server resources.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n## Remediation\r\n\r\nThere is no fixed version for `org.apache.shiro:shiro-web`.\r\n\r\n\r\n## References\r\n\r\n- [Apache Jira Issue](https://issues.apache.org/jira/browse/SHIRO-682)\r\n\r\n- [GitHub PR](https://github.com/apache/shiro/pull/127)\r\n\r\n- [GitHub Commit](https://github.com/apache/shiro/pull/127/commits/81291c161dfb87df45dc9bf42d069fe659c58022)\r\n",
        "disclosureTime": "2019-03-25T16:49:46Z",
        "functions": [
          {
            "functionId": {
              "className": "PathMatchingFilter",
              "filePath": "org/apache/shiro/web/filter/PathMatchingFilter.java",
              "functionName": "pathsMatch"
            },
            "version": [
              "[0,]"
            ]
          },
          {
            "functionId": {
              "className": "PathMatchingFilterChainResolver",
              "filePath": "org/apache/shiro/web/filter/mgt/PathMatchingFilterChainResolver.java",
              "functionName": "getChain"
            },
            "version": [
              "[0,]"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHESHIRO-174083",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "shiro-web",
          "groupId": "org.apache.shiro"
        },
        "methods": [
          {
            "methodId": {
              "className": "PathMatchingFilter",
              "filePath": "org/apache/shiro/web/filter/PathMatchingFilter.java",
              "methodName": "pathsMatch"
            },
            "version": [
              "[0,]"
            ]
          },
          {
            "methodId": {
              "className": "PathMatchingFilterChainResolver",
              "filePath": "org/apache/shiro/web/filter/mgt/PathMatchingFilterChainResolver.java",
              "methodName": "getChain"
            },
            "version": [
              "[0,]"
            ]
          }
        ],
        "modificationTime": "2019-04-02T12:39:59.773630Z",
        "moduleName": "org.apache.shiro:shiro-web",
        "packageManager": "maven",
        "packageName": "org.apache.shiro:shiro-web",
        "patches": [],
        "publicationTime": "2019-04-01T17:22:01Z",
        "references": [
          {
            "title": "Apache Jira Issue",
            "url": "https://issues.apache.org/jira/browse/SHIRO-682"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/apache/shiro/pull/127"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/shiro/pull/127/commits/81291c161dfb87df45dc9bf42d069fe659c58022"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "SpringSource/spring-integration@SpringSource/spring-integration",
          "org.springframework.data:spring-data-geode@2.2.0.BUILD-SNAPSHOT",
          "org.apache.shiro:shiro-spring@1.3.2",
          "org.apache.shiro:shiro-web@1.3.2"
        ],
        "upgradePath": [],
        "version": "1.3.2",
        "name": "org.apache.shiro:shiro-web",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 160,
    "severityMap": {
      "high": 1,
      "medium": 2,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "3 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 3,
    "path": "https://github.com/SpringSource/spring-integration"
  },
  {
    "ok": false,
    "error": "Internal error (reference: fe8ed10f-4687-4c0f-b088-4e970cf9fadd)",
    "path": "scm:git:git://github.com/resteasy/Resteasy.git/jaxrs-api"
  },
  {
    "ok": false,
    "error": "Internal error (reference: b75ffac9-bcb2-4627-b095-cae86ba21d41)",
    "path": "http://itext.svn.sourceforge.net/viewvc/itext"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/itext/itextpdf"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/fabric8io/kubernetes-client"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/fabric8io/kubernetes-client.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/MicroUtils/kotlin-logging"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 8,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/rabbitmq/rabbitmq-java-client"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Netflix/governator"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 9,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "cvs"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mulesoft/mule.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 20edcda1-24d0-42c2-9e05-8db28abd4f33)",
    "path": "scm:git:git://github.com/mulesoft/mule.git/mule-modules/mule-module-spring-config"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 4477648e-62a3-4c2c-8b67-2eb39773380d)",
    "path": "scm:git:git://github.com/mulesoft/mule.git/mule-modules/mule-module-client"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 1a36f980-bb30-415e-b85d-79072d97364e)",
    "path": "scm:git:git://github.com/mulesoft/mule.git/mule-transports/mule-transport-vm"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 61ffcf4d-8e8f-4500-a499-ebcf15b8e385)",
    "path": "scm:git:git://github.com/mulesoft/mule.git/mule-modules/mule-module-xml"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jline/jline2"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/cobertura/cobertura"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 11,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/bonigarcia/webdrivermanager"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 29,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/appium/java-client"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/typesafehub/scala-logging"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/restfb/restfb"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c2986196-8ea2-46f5-887d-72abc3b46ce2)",
    "path": "https://github.com/jpountz/lz4-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ralfstx/minimal-json"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c832c043-1ea9-432f-b895-4c90449f4f7e)",
    "path": "scm:git:git://github.com/easymock/easymock.git/easymockclassextension"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 30,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/spring-projects/spring-amqp"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9957cac6-cfe9-4a17-b5d8-022033f4e3a3)",
    "path": "https://code.google.com/p/checker-framework/"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 6a1b1b5b-07de-4ac6-bc51-9ccecbdf1155)",
    "path": "scm:git:https://github.com/google/google-oauth-java-client.git/google-oauth-client-jetty"
  },
  {
    "ok": false,
    "error": "Internal error (reference: eb80dfba-45dd-479b-af3a-20410da41c21)",
    "path": "scm:git:https://github.com/google/google-oauth-java-client.git/google-oauth-client-java6"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-14T14:43:48.569000Z",
        "credit": [
          "Liao Xinxi"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\nAffected versions of [`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) are vulnerable to Deserialization of Untrusted Data. An attacker may exploit this issue by sending a maliciously crafted input to the `readValue` method of the `ObjectMapper`.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.9 or higher.\n\n## References\n- [Github PR](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1462702)\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/1599)\n- [Github Commit](https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1)\n",
        "disclosureTime": "2017-04-10T21:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.9)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507",
        "identifiers": {
          "CVE": [
            "CVE-2017-7525"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.9)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:36.378971Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2017-09-14T14:43:48.569000Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1462702"
          },
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1599"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.9)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-20T15:28:35.195000Z",
        "credit": [
          "Alessio Soldano"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`com.fasterxml.jackson.core:jackson-core`](https://github.com/FasterXML/jackson-core) is a core part of Jackson that defines Streaming API as well as basic shared abstractions.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service attacks. \r\nIf the REST endpoint consumes POST requests with JSON or XML data and data are invalid, the first unrecognized token is printed to server.log\r\n> If the first token is word of length 10MB, the whole word is printed. This is potentially dangerous and can be used to attack the server by filling the disk with logs.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.8.6` or higher.\r\n\r\n## References\r\n- [Github PR](https://github.com/FasterXML/jackson-core/pull/322)\r\n- [Jira Issue](https://issues.jboss.org/browse/JBEAP-6316)",
        "disclosureTime": "2017-01-12T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "functionId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-core",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "methodId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "modificationTime": "2019-02-05T12:29:08.265741Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-core",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-core",
        "patches": [],
        "publicationTime": "2017-09-20T15:28:35Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://github.com/FasterXML/jackson-core/pull/322"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.jboss.org/browse/JBEAP-6316"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.6)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-core@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-core@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-20T15:28:35.195000Z",
        "credit": [
          "Alessio Soldano"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`com.fasterxml.jackson.core:jackson-core`](https://github.com/FasterXML/jackson-core) is a core part of Jackson that defines Streaming API as well as basic shared abstractions.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service attacks. \r\nIf the REST endpoint consumes POST requests with JSON or XML data and data are invalid, the first unrecognized token is printed to server.log\r\n> If the first token is word of length 10MB, the whole word is printed. This is potentially dangerous and can be used to attack the server by filling the disk with logs.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.8.6` or higher.\r\n\r\n## References\r\n- [Github PR](https://github.com/FasterXML/jackson-core/pull/322)\r\n- [Jira Issue](https://issues.jboss.org/browse/JBEAP-6316)",
        "disclosureTime": "2017-01-12T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "functionId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "functionName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-core",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ReaderBasedJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          },
          {
            "methodId": {
              "className": "UTF8StreamJsonParser",
              "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
              "methodName": "_reportInvalidToken"
            },
            "version": [
              "[,2.8.6)"
            ]
          }
        ],
        "modificationTime": "2019-02-05T12:29:08.265741Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-core",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-core",
        "patches": [],
        "publicationTime": "2017-09-20T15:28:35Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://github.com/FasterXML/jackson-core/pull/322"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.jboss.org/browse/JBEAP-6316"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.6)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2",
          "com.fasterxml.jackson.core:jackson-core@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6",
          "com.fasterxml.jackson.core:jackson-core@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-20T15:28:35.195000Z",
        "credit": [
          "gmethwin@github"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nAffected versions of [`com.fasterxml.jackson.core:jackson-core`](https://core.jackson.fasterxml.com) are vulnerable to Denial of Service attacks. \n\nWhen `WRITE_BIGDECIMAL_AS_PLAIN` setting is enabled, Jackson will attempt to write out the whole number, no matter how large the exponent.\nThe following sample code will trigger an out of memory exception:\n```java\nObjectMapper mapper = new ObjectMapper().enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\nmapper.writeValueAsString(new java.math.BigDecimal(\"9.223372E+1010671858\"));\n```\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.7.8` or higher.\n\n## References\n- [Github Issue](https://github.com/FasterXML/jackson-core/issues/315)\n- [Github Commit](https://github.com/FasterXML/jackson-core/commit/96642978dcf1b69cba68ec72cb2f652d59a8b5be)\n\n",
        "disclosureTime": "2016-08-25T00:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31520",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-core",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:06.623313Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-core",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-core",
        "patches": [],
        "publicationTime": "2017-09-20T15:28:35.195000Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-core/issues/315"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/FasterXML/jackson-core/commit/96642978dcf1b69cba68ec72cb2f652d59a8b5be"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.8)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-core@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-core@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-20T15:28:35.195000Z",
        "credit": [
          "gmethwin@github"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nAffected versions of [`com.fasterxml.jackson.core:jackson-core`](https://core.jackson.fasterxml.com) are vulnerable to Denial of Service attacks. \n\nWhen `WRITE_BIGDECIMAL_AS_PLAIN` setting is enabled, Jackson will attempt to write out the whole number, no matter how large the exponent.\nThe following sample code will trigger an out of memory exception:\n```java\nObjectMapper mapper = new ObjectMapper().enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\nmapper.writeValueAsString(new java.math.BigDecimal(\"9.223372E+1010671858\"));\n```\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.7.8` or higher.\n\n## References\n- [Github Issue](https://github.com/FasterXML/jackson-core/issues/315)\n- [Github Commit](https://github.com/FasterXML/jackson-core/commit/96642978dcf1b69cba68ec72cb2f652d59a8b5be)\n\n",
        "disclosureTime": "2016-08-25T00:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31520",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-core",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:06.623313Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-core",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-core",
        "patches": [],
        "publicationTime": "2017-09-20T15:28:35.195000Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-core/issues/315"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/FasterXML/jackson-core/commit/96642978dcf1b69cba68ec72cb2f652d59a8b5be"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.8)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2",
          "com.fasterxml.jackson.core:jackson-core@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6",
          "com.fasterxml.jackson.core:jackson-core@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-core",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-07T13:13:32.343000Z",
        "credit": [
          "Liao Xinxi"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)).\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.10 or higher.\n\n## References\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1506612)\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/1680)\n- [Github Issue #2](https://github.com/FasterXML/jackson-databind/issues/1737)\n- [Github Commit #1](https://github.com/FasterXML/jackson-databind/commit/e8f043d1)\n- [Github Commit #2](https://github.com/FasterXML/jackson-databind/commit/e8f043d1)\n",
        "disclosureTime": "2017-06-26T21:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.10)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31573",
        "identifiers": {
          "CVE": [
            "CVE-2017-15095"
          ],
          "CWE": [
            "CWE-184"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.6.7.1)",
              "[2.7,2.7.9.1)",
              "[2.8,2.8.10)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:08:19.457488Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2017-11-09T03:13:32.343000Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1506612"
          },
          {
            "title": "Github Issue #1",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1680"
          },
          {
            "title": "Github Issue #2",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1737"
          },
          {
            "title": "Github Commit #1",
            "url": "https://github.com/FasterXML/jackson-databind/commit/e8f043d1"
          },
          {
            "title": "Github Commit #2",
            "url": "https://github.com/FasterXML/jackson-databind/commit/e8f043d1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.10)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-11T11:41:28.547000Z",
        "credit": [
          "Imre Rad"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [Securityfocus Thread](http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1855)\n- [PoC Project](https://github.com/irsl/jackson-rce-via-spel/)\n",
        "disclosureTime": "2018-01-10T11:41:28.547000Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043",
        "identifiers": {
          "CVE": [
            "CVE-2017-17485"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:07:52.311084Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-01-22T12:30:55.344000Z",
        "references": [
          {
            "title": "Securityfocus Thread",
            "url": "http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1855"
          },
          {
            "title": "PoC Project",
            "url": "https://github.com/irsl/jackson-rce-via-spel/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-22T15:40:18.105000Z",
        "credit": [
          "Rui Chong"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) and [CVE-2017-17485](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043)). This is exploitable via two different gadgets that bypass a blacklist.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1899)\n- [GitHub Commit](https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05)\n",
        "disclosureTime": "2018-01-18T15:40:18.104000Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32044",
        "identifiers": {
          "CVE": [
            "CVE-2018-5968"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11)",
              "[2.9,2.9.4)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:05:33.494824Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-01-23T13:17:24.437000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1899"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-02-26T15:13:40.723000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.1, 2.9.5 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)",
        "disclosureTime": "2018-02-10T15:13:40Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
        "identifiers": {
          "CVE": [
            "CVE-2018-7489"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "modificationTime": "2019-01-22T14:48:14.090324Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-02-26T15:13:40Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1931"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11.1)",
            "[2.9.0, 2.9.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:11:34.234921Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n",
        "disclosureTime": "2018-05-29T17:00:04Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
        "identifiers": {
          "CVE": [
            "CVE-2018-12022"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:54.614880Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:00:03Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2052"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:14:00.916831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n",
        "disclosureTime": "2018-05-10T17:10:58Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
        "identifiers": {
          "CVE": [
            "CVE-2018-11307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:14.778205Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:10:50Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2032"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:16:09.944095Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to zCVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/issues/2058)\n",
        "disclosureTime": "2018-05-29T17:15:50Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
        "identifiers": {
          "CVE": [
            "CVE-2018-12023"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:33.816672Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:15:49Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2058"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.8.1",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.6",
          "com.fasterxml.jackson.core:jackson-databind@2.7.3"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.6",
          "com.fasterxml.jackson.core:jackson-databind@2.7.3"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.6",
          "com.fasterxml.jackson.core:jackson-databind@2.7.3"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          "de.grundid.opendatalab:geojson-jackson@1.6",
          "com.fasterxml.jackson.core:jackson-databind@2.7.3"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "fakemongo/fongo@fakemongo/fongo",
          "de.grundid.opendatalab:geojson-jackson@1.2",
          "com.fasterxml.jackson.core:jackson-databind@2.2.2"
        ],
        "upgradePath": [
          false,
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.2.2",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 7,
    "severityMap": {
      "high": 15,
      "medium": 2,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "19 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 17,
    "path": "https://github.com/fakemongo/fongo"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/asciidoctor/asciidoctorj"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 6,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-module-scala"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jsevellec/cassandra-unit"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/bndtools/bnd"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7c1bbcbd-e007-4499-911b-9825ba2a83ea)",
    "path": "https://github.com/serenity-bdd/$project.name"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 14,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/serenity-bdd/serenity-core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 6,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-dataformat-xml"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/x-stream/xstream.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 78e766e0-ac41-46d6-94b1-165f44fa6eff)",
    "path": "scm:git:https://github.com/greenmail-mail-test/greenmail.git/greenmail"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a543770c-dfe2-49a4-afdf-aab5463ef037)",
    "path": "scm:git:git@github.com:weld/core.git/weld-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e3a488bc-6206-42a0-a003-30f8612ec473)",
    "path": "scm:git:git@github.com:weld/core.git/weld-se"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8d8968b2-7b0f-4c8c-a365-26070064f5b8)",
    "path": "scm:git:git@github.com:hunterhacker/jdom"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 333b61dc-c620-4e65-9280-83e7d6de52e0)",
    "path": "scm:git:git://git@github.com:arquillian/arquillian-core.git/arquillian-build/arquillian-junit-container"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/angular/bower-angular"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/cowtowncoder/java-classmate"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ning/compress"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-dataformats-binary"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/dnsjava/dnsjava"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8a044fd3-cd8a-4fc0-bdf7-3a8be680d21a)",
    "path": "http://ldap-sdk.svn.sourceforge.net/viewvc/ldap-sdk/trunk/"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 4,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/sbt/junit-interface.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jkuhnert/ognl"
  },
  {
    "ok": false,
    "error": "504",
    "path": "scm:git:git@github.com:ops4j/org.ops4j.pax.exam2.git/exam/pax-exam-link-mvn"
  },
  {
    "ok": false,
    "error": "Internal error (reference: dd2bbb03-4a32-4022-8ecf-1acbb584e3e9)",
    "path": "scm:git:git@github.com:ops4j/org.ops4j.pax.exam2.git/exam/pax-exam-junit4"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:51Z",
        "credit": [
          "Alvaro Munoz"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\r\n[`commons-beanutils:commons-beanutils`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-beanutils%22)\r\n\r\nVulnerable versions of _Apache Commons BeanUtils_, do not suppress the class property, which allows remote attackers to manipulate the `ClassLoader` and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the `getClass` method of the `ActionForm` object in Struts 1.\r\n\r\n# Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_ \r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google \r\n\r\n## References\r\n- [Alvaro Munoz Blog](http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Protect-your-Struts1-applications/ba-p/6463188#.U2J7xeaSxro)\r\n- [CVE](http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0114)\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1091938)",
        "disclosureTime": "2014-05-01T16:51:51Z",
        "functions": [],
        "id": "SNYK-JAVA-COMMONSBEANUTILS-30077",
        "identifiers": {
          "CVE": [
            "CVE-2014-0114"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-beanutils",
          "groupId": "commons-beanutils"
        },
        "methods": [],
        "modificationTime": "2018-12-05T11:21:45.051760Z",
        "moduleName": "commons-beanutils:commons-beanutils",
        "packageManager": "maven",
        "packageName": "commons-beanutils:commons-beanutils",
        "patches": [],
        "publicationTime": "2014-05-01T16:51:51Z",
        "references": [
          {
            "title": "Alvaro Munoz Blog",
            "url": "http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Protect-your-Struts1-applications/ba-p/6463188#.U2J7xeaSxro"
          },
          {
            "title": "CVE",
            "url": "http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0114"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1091938"
          }
        ],
        "semver": {
          "vulnerable": [
            "(,1.9.1]"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "commons-beanutils:commons-beanutils@1.8.0"
        ],
        "upgradePath": [
          false,
          "commons-beanutils:commons-beanutils@1.9.2"
        ],
        "version": "1.8.0",
        "name": "commons-beanutils:commons-beanutils",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`commons-collections:commons-collections`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-collections%22)\nApache commons-collections library permitted code execution when deserializing objects involving a specially constructed chain of classes. A remote attacker could use this flaw to execute arbitrary code with the permissions of the application using the commons-collections library.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n \nThe vulnerability, also know as _Mad Gadget_ \n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google \n\n\n## References\n- [breenmachine Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n",
        "disclosureTime": "2015-11-06T16:51:56Z",
        "functions": [
          {
            "functionId": {
              "className": "InvokerTransformer",
              "filePath": "org/apache/commons/collections/functors/InvokerTransformer.java",
              "functionName": "transform"
            },
            "version": [
              "[3,3.2.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
        "identifiers": {
          "CVE": [
            "CVE-2015-7501"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-collections",
          "groupId": "commons-collections"
        },
        "methods": [
          {
            "methodId": {
              "className": "InvokerTransformer",
              "filePath": "org/apache/commons/collections/functors/InvokerTransformer.java",
              "methodName": "transform"
            },
            "version": [
              "[3,3.2.2)"
            ]
          }
        ],
        "modificationTime": "2018-11-22T10:10:08.571223Z",
        "moduleName": "commons-collections:commons-collections",
        "packageManager": "maven",
        "packageName": "commons-collections:commons-collections",
        "patches": [],
        "publicationTime": "2015-11-06T16:51:56Z",
        "references": [
          {
            "title": "breenmachine Blog",
            "url": "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3,3.2.2)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "commons-collections:commons-collections@3.2.1"
        ],
        "upgradePath": [
          false,
          "commons-collections:commons-collections@3.2.2"
        ],
        "version": "3.2.1",
        "name": "commons-collections:commons-collections",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:55Z",
        "credit": [
          "cpnrodzc7"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n\nAffected versions of [`org.codehaus.groovy:groovy-all`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22groovy-all%22) are vulnerable to Deserialization of Untrusted Data.\nThe `MethodClosure` class allows remote attackers to execute arbitrary code or cause a denial of service via a crafted serialized object.\n\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n\n\n## References\n- [Seclists](http://seclists.org/oss-sec/2015/q3/121)\n",
        "disclosureTime": "2016-12-25T16:51:55Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGCODEHAUSGROOVY-30076",
        "identifiers": {
          "CVE": [
            "CVE-2015-3253"
          ],
          "CWE": [
            "CWE-74"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "groovy-all",
          "groupId": "org.codehaus.groovy"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:10.340503Z",
        "moduleName": "org.codehaus.groovy:groovy-all",
        "packageManager": "maven",
        "packageName": "org.codehaus.groovy:groovy-all",
        "patches": [],
        "publicationTime": "2016-12-25T16:51:55Z",
        "references": [
          {
            "title": "Seclists",
            "url": "http://seclists.org/oss-sec/2015/q3/121"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.7.0,2), [2,2.4.3]"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "org.codehaus.groovy:groovy-all@1.8.0"
        ],
        "upgradePath": [
          false,
          "org.codehaus.groovy:groovy-all@2.4.4"
        ],
        "version": "1.8.0",
        "name": "org.codehaus.groovy:groovy-all",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-09-20T09:16:32.424000Z",
        "credit": [
          "Sam Thomas"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`org.codehaus.groovy:groovy`](https://incubator.apache.org/projects/groovy.html) is an object-oriented programming language for the Java platform.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data via the `MethodClosure` class. A malicious user may craft a special serialized object that will execute code directly when deserialized. This can also cause a Denial of Service (DoS).\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n\n## Remediation\nUpgrade `org.codehaus.groovy:groovy` to version 2.4.7 or higher.\n\n## References\n- [Groovy Security Advisory](http://groovy-lang.org/security.html)\n- [GitHub Commit](https://github.com/apache/groovy/commit/4df8b652aa018a5d5d1cda8fba938bf3422db31c)\n- [Security Focus](http://www.securityfocus.com/bid/95429/info)\n",
        "disclosureTime": "2016-09-20T22:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "MethodClosure",
              "filePath": "org/codehaus/groovy/runtime/MethodClosure.java",
              "functionName": "readResolve"
            },
            "version": [
              "[2.4.4, 2.4.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGCODEHAUSGROOVY-31510",
        "identifiers": {
          "CVE": [
            "CVE-2016-6814"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "groovy-all",
          "groupId": "org.codehaus.groovy"
        },
        "methods": [
          {
            "methodId": {
              "className": "MethodClosure",
              "filePath": "org/codehaus/groovy/runtime/MethodClosure.java",
              "methodName": "readResolve"
            },
            "version": [
              "[2.4.4, 2.4.7)"
            ]
          }
        ],
        "modificationTime": "2019-04-01T10:01:39.000229Z",
        "moduleName": "org.codehaus.groovy:groovy-all",
        "packageManager": "maven",
        "packageName": "org.codehaus.groovy:groovy-all",
        "patches": [],
        "publicationTime": "2017-09-20T09:16:32.424000Z",
        "references": [
          {
            "title": "Groovy Security Advisory",
            "url": "http://groovy-lang.org/security.html"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/groovy/commit/4df8b652aa018a5d5d1cda8fba938bf3422db31c"
          },
          {
            "title": "Security Focus",
            "url": "http://www.securityfocus.com/bid/95429/info"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.4.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "org.codehaus.groovy:groovy-all@1.8.0"
        ],
        "upgradePath": [
          false,
          "org.codehaus.groovy:groovy-all@2.4.7"
        ],
        "version": "1.8.0",
        "name": "org.codehaus.groovy:groovy-all",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:32.257000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\r\n[`xalan:xalan`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xalan%22)\r\nThe TransformerFactory in Apache Xalan-Java before 2.7.2 does not properly restrict access to certain properties when FEATURE_SECURE_PROCESSING is enabled, which allows remote attackers to bypass expected restrictions and load arbitrary classes or access external resources via a crafted (1) xalan:content-header, (2) xalan:entities, (3) xslt:content-header, or (4) xslt:entities property, or a Java property that is bound to the XSLT 1.0 system-property function.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0107)",
        "disclosureTime": "2014-06-06T19:55:53Z",
        "functions": [],
        "id": "SNYK-JAVA-XALAN-31385",
        "identifiers": {
          "CVE": [
            "CVE-2014-0107"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xalan",
          "groupId": "xalan"
        },
        "methods": [],
        "modificationTime": "2018-12-05T11:58:28.233172Z",
        "moduleName": "xalan:xalan",
        "packageManager": "maven",
        "packageName": "xalan:xalan",
        "patches": [],
        "publicationTime": "2014-06-06T19:55:53Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0107"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0,2.7.1]"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Class Load",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "xalan:xalan@2.7.0"
        ],
        "upgradePath": [
          false,
          false,
          "xalan:xalan@2.7.2"
        ],
        "version": "2.7.0",
        "name": "xalan:xalan",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:49Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n[`xerces:xercesImpl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22) is a complete framework for building parser components and configurations that is extremely modular and easy to program.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks, which is caused by the way the JRE processes XML files. A remote attacker could use this flaw to supply crafted XML that would lead to a denial of service.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `xerces:xercesImpl` to `2.12.0` or higher.\r\n\r\n## References\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2013-4002)\r\n- [Apache-SVN](http://svn.apache.org/viewvc?view=revision&revision=1499506)",
        "disclosureTime": "2013-10-15T16:51:49Z",
        "functions": [],
        "id": "SNYK-JAVA-XERCES-30183",
        "identifiers": {
          "CVE": [
            "CVE-2013-4002"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [],
        "modificationTime": "2019-02-03T14:24:48.969949Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2013-10-15T16:51:49Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2013-4002"
          },
          {
            "title": "Apache-SVN",
            "url": "http://svn.apache.org/viewvc?view=revision&revision=1499506"
          }
        ],
        "semver": {
          "vulnerable": [
            "(,2.12.0)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          false,
          "xerces:xercesImpl@2.12.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:49Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n[`xerces:xercesImpl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22) is a complete framework for building parser components and configurations that is extremely modular and easy to program.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks, which is caused by the way the JRE processes XML files. A remote attacker could use this flaw to supply crafted XML that would lead to a denial of service.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `xerces:xercesImpl` to `2.12.0` or higher.\r\n\r\n## References\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2013-4002)\r\n- [Apache-SVN](http://svn.apache.org/viewvc?view=revision&revision=1499506)",
        "disclosureTime": "2013-10-15T16:51:49Z",
        "functions": [],
        "id": "SNYK-JAVA-XERCES-30183",
        "identifiers": {
          "CVE": [
            "CVE-2013-4002"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [],
        "modificationTime": "2019-02-03T14:24:48.969949Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2013-10-15T16:51:49Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2013-4002"
          },
          {
            "title": "Apache-SVN",
            "url": "http://svn.apache.org/viewvc?view=revision&revision=1499506"
          }
        ],
        "semver": {
          "vulnerable": [
            "(,2.12.0)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "jaxen:jaxen@1.1-beta-8",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          "xom:xom@1.3.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-08T16:02:15.301000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nAffected versions of [`xerces:xercesImpl`](https://xerces.apache.org/) are vulnerable to Denial of Service (DoS) attacks. An attacker may be able to force the target server to parse an FTP URL, which points to an FTP server controller by the attacker. When the target server is mid way through fetching the FTP resources, the attackers malicious FTP server will exit the process and will leave the thread hanging in the target server.\n\nIt is possible to conduvt this attack only if the following conditions are met:\n* An attacker can pass an URL parameter that points to a controlled FTP server to the target.\n* Target server uses vulnerable component(s) to fetch the resource specified by the attacker.\n* Target server does not prevent fetching of FTP URI resources.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nThere is no fix version for `xerces:xercesImpl`.\n\n## References\n- [Blog Post](https://blogs.securiteam.com/index.php/archives/3271)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-10355)\n",
        "disclosureTime": "2017-08-29T23:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-XERCES-31497",
        "identifiers": {
          "CVE": [
            "CVE-2017-10355"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:08.445829Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2017-09-08T16:02:15.301000Z",
        "references": [
          {
            "title": "Blog Post",
            "url": "https://blogs.securiteam.com/index.php/archives/3271"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-10355"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.11.0]"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          false,
          "xerces:xercesImpl@2.12.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-09-08T16:02:15.301000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nAffected versions of [`xerces:xercesImpl`](https://xerces.apache.org/) are vulnerable to Denial of Service (DoS) attacks. An attacker may be able to force the target server to parse an FTP URL, which points to an FTP server controller by the attacker. When the target server is mid way through fetching the FTP resources, the attackers malicious FTP server will exit the process and will leave the thread hanging in the target server.\n\nIt is possible to conduvt this attack only if the following conditions are met:\n* An attacker can pass an URL parameter that points to a controlled FTP server to the target.\n* Target server uses vulnerable component(s) to fetch the resource specified by the attacker.\n* Target server does not prevent fetching of FTP URI resources.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nThere is no fix version for `xerces:xercesImpl`.\n\n## References\n- [Blog Post](https://blogs.securiteam.com/index.php/archives/3271)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-10355)\n",
        "disclosureTime": "2017-08-29T23:00:00Z",
        "functions": [],
        "id": "SNYK-JAVA-XERCES-31497",
        "identifiers": {
          "CVE": [
            "CVE-2017-10355"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:08.445829Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2017-09-08T16:02:15.301000Z",
        "references": [
          {
            "title": "Blog Post",
            "url": "https://blogs.securiteam.com/index.php/archives/3271"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-10355"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.11.0]"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "jaxen:jaxen@1.1-beta-8",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          "xom:xom@1.3.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-12T08:41:04.509000Z",
        "credit": [
          "Juraj Somorovsky"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n\r\n[xerces:xercesImpl](https://mvnrepository.com/artifact/xerces/xercesImpl) is a fully compliant XML parsers in the Apache Xerces family\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nApache Xerces2 Java allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.\r\n\r\n## Remediation\r\n\r\nUpgrade `xerces:xercesImpl` to version 2.12.0 or higher.\r\n\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## References\r\n\r\n- [Jira Issue](https://issues.apache.org/jira/browse/XERCESJ-1685?jql=project%20%3D%20XERCESJ)\r\n\r\n- [GutHub Commit](https://github.com/apache/xerces2-j/commit/992b5d9c24102ad20330d36c0a71162753a37449)\r\n\r\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2012-0881)\r\n\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=787104)\r\n",
        "disclosureTime": "2012-02-02T22:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "functionName": "addAttribute"
            },
            "version": [
              "[2.6.1,2.6.2-jaxb-1.0.6)"
            ]
          },
          {
            "functionId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "functionName": "addAttribute"
            },
            "version": [
              "[2.6.2,2.12.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-XERCES-31585",
        "identifiers": {
          "CVE": [
            "CVE-2012-0881"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [
          {
            "methodId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "methodName": "addAttribute"
            },
            "version": [
              "[2.6.1,2.6.2-jaxb-1.0.6)"
            ]
          },
          {
            "methodId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "methodName": "addAttribute"
            },
            "version": [
              "[2.6.2,2.12.0)"
            ]
          }
        ],
        "modificationTime": "2019-03-26T13:18:42.449811Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2017-11-16T08:41:04Z",
        "references": [
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/XERCESJ-1685?jql=project%20%3D%20XERCESJ"
          },
          {
            "title": "GutHub Commit",
            "url": "https://github.com/apache/xerces2-j/commit/992b5d9c24102ad20330d36c0a71162753a37449"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2012-0881"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=787104"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,2.12.0)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          false,
          "xerces:xercesImpl@2.12.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-11-12T08:41:04.509000Z",
        "credit": [
          "Juraj Somorovsky"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n\r\n[xerces:xercesImpl](https://mvnrepository.com/artifact/xerces/xercesImpl) is a fully compliant XML parsers in the Apache Xerces family\r\n\r\n\r\nAffected versions of this package are vulnerable to Denial of Service (DoS).\r\nApache Xerces2 Java allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.\r\n\r\n## Remediation\r\n\r\nUpgrade `xerces:xercesImpl` to version 2.12.0 or higher.\r\n\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## References\r\n\r\n- [Jira Issue](https://issues.apache.org/jira/browse/XERCESJ-1685?jql=project%20%3D%20XERCESJ)\r\n\r\n- [GutHub Commit](https://github.com/apache/xerces2-j/commit/992b5d9c24102ad20330d36c0a71162753a37449)\r\n\r\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2012-0881)\r\n\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=787104)\r\n",
        "disclosureTime": "2012-02-02T22:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "functionName": "addAttribute"
            },
            "version": [
              "[2.6.1,2.6.2-jaxb-1.0.6)"
            ]
          },
          {
            "functionId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "functionName": "addAttribute"
            },
            "version": [
              "[2.6.2,2.12.0)"
            ]
          }
        ],
        "id": "SNYK-JAVA-XERCES-31585",
        "identifiers": {
          "CVE": [
            "CVE-2012-0881"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [
          {
            "methodId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "methodName": "addAttribute"
            },
            "version": [
              "[2.6.1,2.6.2-jaxb-1.0.6)"
            ]
          },
          {
            "methodId": {
              "className": "XMLAttributesImpl",
              "filePath": "org/apache/xerces/util/XMLAttributesImpl.java",
              "methodName": "addAttribute"
            },
            "version": [
              "[2.6.2,2.12.0)"
            ]
          }
        ],
        "modificationTime": "2019-03-26T13:18:42.449811Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2017-11-16T08:41:04Z",
        "references": [
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/XERCESJ-1685?jql=project%20%3D%20XERCESJ"
          },
          {
            "title": "GutHub Commit",
            "url": "https://github.com/apache/xerces2-j/commit/992b5d9c24102ad20330d36c0a71162753a37449"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2012-0881"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=787104"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,2.12.0)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "jaxen:jaxen@1.1-beta-8",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          "xom:xom@1.3.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-12-02T20:50:44.742000Z",
        "credit": [
          "Jukka Taimisto",
          "Tero Rontti",
          "Rauli Kaksonen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`xerces:xercesImpl`](http://xerces.apache.org/) is the next generation of high performance, fully compliant XML parsers in the Apache Xerces family.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\n\nXMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0 before Update 20, and in other products, allows remote attackers to cause a denial of service (infinite loop and application hang) via malformed XML input, as demonstrated by the Codenomicon XML fuzzing framework.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2009-2625)\n",
        "disclosureTime": "2009-08-03T20:50:44.742000Z",
        "functions": [],
        "id": "SNYK-JAVA-XERCES-32014",
        "identifiers": {
          "CVE": [
            "CVE-2009-2625"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [],
        "modificationTime": "2018-11-18T11:50:45.872400Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2017-12-04T13:10:45.356000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2009-2625"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.0)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          false,
          "xerces:xercesImpl@2.10.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-12-02T20:50:44.742000Z",
        "credit": [
          "Jukka Taimisto",
          "Tero Rontti",
          "Rauli Kaksonen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`xerces:xercesImpl`](http://xerces.apache.org/) is the next generation of high performance, fully compliant XML parsers in the Apache Xerces family.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\n\nXMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0 before Update 20, and in other products, allows remote attackers to cause a denial of service (infinite loop and application hang) via malformed XML input, as demonstrated by the Codenomicon XML fuzzing framework.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2009-2625)\n",
        "disclosureTime": "2009-08-03T20:50:44.742000Z",
        "functions": [],
        "id": "SNYK-JAVA-XERCES-32014",
        "identifiers": {
          "CVE": [
            "CVE-2009-2625"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xercesimpl",
          "groupId": "xerces"
        },
        "methods": [],
        "modificationTime": "2018-11-18T11:50:45.872400Z",
        "moduleName": "xerces:xercesimpl",
        "packageManager": "maven",
        "packageName": "xerces:xercesImpl",
        "patches": [],
        "publicationTime": "2017-12-04T13:10:45.356000Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2009-2625"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.10.0)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "aalmiray/Json-lib@aalmiray/Json-lib",
          "xom:xom@1.1",
          "jaxen:jaxen@1.1-beta-8",
          "xerces:xercesImpl@2.6.2"
        ],
        "upgradePath": [
          false,
          "xom:xom@1.3.0"
        ],
        "version": "2.6.2",
        "name": "xerces:xercesImpl",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 17,
    "severityMap": {
      "high": 6,
      "medium": 3,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "13 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 9,
    "path": "git://github.com/aalmiray/Json-lib.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/FasterXML/jackson-modules-base"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jdk8@FasterXML/jackson-datatype-jdk8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.0-SNAPSHOT"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.0-SNAPSHOT",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jdk8@FasterXML/jackson-datatype-jdk8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.0-SNAPSHOT"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.0-SNAPSHOT",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-datatype-jdk8@FasterXML/jackson-datatype-jdk8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.0-SNAPSHOT"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.0-SNAPSHOT",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 2,
    "severityMap": {
      "high": 3,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "3 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 3,
    "path": "https://github.com/FasterXML/jackson-datatype-jdk8"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e7115cfe-0790-4a45-8fd6-87b9cbca7f5c)",
    "path": "scm:git:git@github.com:pac4j/pac4j.git/pac4j-cas"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-02-26T15:13:40.723000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.1, 2.9.5 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)",
        "disclosureTime": "2018-02-10T15:13:40Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
        "identifiers": {
          "CVE": [
            "CVE-2018-7489"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.8.11.1)",
              "[2.9.0,2.9.5)"
            ]
          }
        ],
        "modificationTime": "2019-01-22T14:48:14.090324Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-02-26T15:13:40Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/1931"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.8.11.1)",
            "[2.9.0, 2.9.5)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:11:34.234921Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n",
        "disclosureTime": "2018-05-29T17:00:04Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
        "identifiers": {
          "CVE": [
            "CVE-2018-12022"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:09:54.614880Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:00:03Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2052"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:14:00.916831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n",
        "disclosureTime": "2018-05-10T17:10:58Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
        "identifiers": {
          "CVE": [
            "CVE-2018-11307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0, 2.8.11.2)",
              "[2.9.0, 2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:14.778205Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:10:50Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2032"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:16:09.944095Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to zCVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/issues/2058)\n",
        "disclosureTime": "2018-05-29T17:15:50Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
        "identifiers": {
          "CVE": [
            "CVE-2018-12023"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.7.9.4)",
              "[2.8.0,2.8.11.2)",
              "[2.9.0,2.9.6)"
            ]
          }
        ],
        "modificationTime": "2018-12-20T13:10:33.816672Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:15:49Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2058"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-jaxb-annotations@FasterXML/jackson-module-jaxb-annotations#fa595c637e7483c3cf21dd16f8026ad360503f46",
          "com.fasterxml.jackson.core:jackson-databind@2.8.11"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.8.11",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 3,
    "severityMap": {
      "high": 11,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "11 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 11,
    "path": "https://github.com/FasterXML/jackson-module-jaxb-annotations"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 329e7979-f64e-4529-86ac-b98f699ca4a8)",
    "path": "scm:git:git@github.com:pac4j/pac4j.git/pac4j-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f9368790-8f9f-45be-9192-679540bafe53)",
    "path": "scm:git:git://github.com/saucelabs/sauce-java.git/sauce_junit"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-parameter-names@FasterXML/jackson-module-parameter-names",
          "com.fasterxml.jackson.core:jackson-databind@2.9.0-SNAPSHOT"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.0-SNAPSHOT",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-parameter-names@FasterXML/jackson-module-parameter-names",
          "com.fasterxml.jackson.core:jackson-databind@2.9.0-SNAPSHOT"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.0-SNAPSHOT",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "FasterXML/jackson-module-parameter-names@FasterXML/jackson-module-parameter-names",
          "com.fasterxml.jackson.core:jackson-databind@2.9.0-SNAPSHOT"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.0-SNAPSHOT",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      }
    ],
    "numDependencies": 2,
    "severityMap": {
      "high": 3,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "3 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 3,
    "path": "https://github.com/FasterXML/jackson-module-parameter-names"
  },
  {
    "ok": false,
    "error": "Internal error (reference: ae80abd3-2ffa-4b72-a5c7-152bb40ff436)",
    "path": "http://xircles.codehaus.org/projects/jackson/repos/primary/repo"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 22eef99a-dddc-4129-b87b-765ad486cedf)",
    "path": "scm:git:https://git-wip-us.apache.org/repos/asf/ant.git/ant"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 205f6761-343d-4a32-8c84-c2dcb85192ac)",
    "path": "https://svn.apache.org/repos/asf/httpcomponents/httpclient/tags/4.5.3"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 35,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mbostock/d3"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Microsoft/TypeScript"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 48,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/expressjs/express"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e2fef6f1-94bc-4326-be9b-ef748685efd3)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-tools/spring-boot-loader"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 77f19b9d-7af8-4e0b-a130-32e9dd52860c)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-tools/spring-boot-gradle-plugin"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c86c592d-e4a7-4cdc-9c1a-fe49d10a1b20)",
    "path": "scm:git:git://github.com/spring-projects/spring-boot.git/spring-boot-cli"
  },
  {
    "ok": false,
    "error": "Internal error (reference: e55607e9-f31a-4650-99fd-bb821a772f3a)",
    "path": "scm:git:https://github.com/square/okhttp.git/okhttp-urlconnection"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c2a97109-65d6-4100-9e1b-e58ade770015)",
    "path": "https://github.com/JetBrains/kotlin.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/airbnb/lottie-android"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/DefinitelyTyped/DefinitelyTyped"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7ddaaad8-2921-4b3a-acbd-0c034a286c77)",
    "path": "scm:git:git@github.com:apache/spark.git/spark-network-shuffle_2.11"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 33f5b9d7-e90f-42f5-8f88-bec694747868)",
    "path": "scm:git:git@github.com:apache/spark.git/spark-repl_2.10"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2e172710-7e35-419b-bc26-b297d239d316)",
    "path": "scm:git:git://github.com/square/picasso.git/picasso"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 90cd320d-ec95-42f7-a19c-b19744f639d2)",
    "path": "scm:git@github.com/chrisbanes/PhotoView.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 100c70fd-d327-4fc7-ae20-b9b7daaccbc6)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-backend-headless"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 94dcf053-739d-438f-a77b-704354993c8b)",
    "path": "scm:git:https://github.com/libgdx/libgdx.git/gdx-controllers-parent/gdx-controllers"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/tj/commander.js"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5b1cf43c-fc18-474f-90d2-3ed243c30944)",
    "path": "https://github.com/SeleniumHQ/selenium"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/wechat-group/weixin-java-tools"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 03d93412-c1e5-4576-8105-d3fed261c72b)",
    "path": "https://github.com/google/dagger"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/material-components/material-components-web"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/openzipkin/zipkin"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/mikepenz/MaterialDrawer"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0cab47d9-4e3d-437c-b5f2-fd8f2f6733ea)",
    "path": "scm:git:git@github.com:deeplearning4j/deeplearning4j.git/deeplearning4j-nlp-parent/deeplearning4j-nlp"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/systemjs/systemjs"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 4dc9c378-0c0d-42a3-b713-e466af49ca83)",
    "path": "git@github.com:apache/flink.git/flink-staging/flink-streaming-parent/flink-streaming-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: ffc3d582-6219-414f-adb5-03487bd51167)",
    "path": "git@github.com:apache/flink.git/flink-staging/flink-avro"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/silviomoreto/bootstrap-select"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/HubSpot/tether"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/zloirock/core-js"
  },
  {
    "ok": false,
    "error": "Internal error (reference: efa6132e-0132-4708-9f83-9c2f0b739543)",
    "path": "scm:git:git://github.com/google/guice.git/extensions-parent/guice-persist"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/visionmedia/debug"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 90fa3b58-381e-4387-889f-325a00adbc1f)",
    "path": "git://github.com/erlang/otp.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/koral--/android-gif-drawable"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 66acecc9-49bc-4f2e-bd73-5099efc586ce)",
    "path": "scm:git:git://github.com/codahale/dropwizard.git/dropwizard-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: edff8ee7-0dff-49f2-8bb4-ca97915fee6a)",
    "path": "scm:git:git://github.com/dropwizard/dropwizard.git/dropwizard-metrics-graphite"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.google.guava:guava@16.0.1"
        ],
        "upgradePath": [
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "16.0.1",
        "name": "com.google.guava:guava",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "io.opencensus:opencensus-impl@0.19.1",
          "io.opencensus:opencensus-impl-core@0.19.1",
          "com.google.guava:guava@16.0.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "16.0.1",
        "name": "com.google.guava:guava",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:52Z",
        "credit": [
          "Laurentiu Luca"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`io.netty:netty`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22)\nThe SslHandler in Netty before 3.9.2 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted SSLv2Hello message.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3488)\n- [GitHub Issue](https://github.com/netty/netty/issues/2562)\n- [Netty release notes](http://netty.io/news/2014/06/11/3-9-2-Final.html)\n",
        "disclosureTime": "2014-06-11T16:51:52Z",
        "functions": [],
        "id": "SNYK-JAVA-IONETTY-30100",
        "identifiers": {
          "CVE": [
            "CVE-2014-3488"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "netty",
          "groupId": "io.netty"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.213375Z",
        "moduleName": "io.netty:netty",
        "packageManager": "maven",
        "packageName": "io.netty:netty",
        "patches": [],
        "publicationTime": "2014-06-11T16:51:52Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2014-3488"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/netty/netty/issues/2562"
          },
          {
            "title": "Netty release notes",
            "url": "http://netty.io/news/2014/06/11/3-9-2-Final.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.9.1.Final]"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha",
          "io.netty:netty@3.7.0.Final"
        ],
        "upgradePath": [
          false,
          false,
          "io.netty:netty@3.9.1.1.Final"
        ],
        "version": "3.7.0.Final",
        "name": "io.netty:netty",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.109000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`io.netty:netty`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22) is an event-driven asynchronous network application framework.\n\nAffected versions of this package are vulnerable to Denial of Service attack. `WebSocket08FrameDecoder` allows remote attackers to cause a denial of service (memory consumption) via a `TextWebSocketFrame` followed by a long stream of `ContinuationWebSocketFrames`.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `io.netty:netty` to versions 3.6.9, 3.7.1, 3.8.2, 3.9.1, 4.0.19 or higher. \n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0193)\n- [Netty Release Notes](http://netty.io/news/2014/04/30/release-day.html)\n- [Guthub Issue](https://github.com/netty/netty/issues/2441)\n",
        "disclosureTime": "2015-02-11T00:22:53Z",
        "functions": [],
        "id": "SNYK-JAVA-IONETTY-30429",
        "identifiers": {
          "CVE": [
            "CVE-2014-0193"
          ],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "netty",
          "groupId": "io.netty"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.819564Z",
        "moduleName": "io.netty:netty",
        "packageManager": "maven",
        "packageName": "io.netty:netty",
        "patches": [],
        "publicationTime": "2015-02-11T00:22:53Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0193"
          },
          {
            "title": "Netty Release Notes",
            "url": "http://netty.io/news/2014/04/30/release-day.html"
          },
          {
            "title": "Guthub Issue",
            "url": "https://github.com/netty/netty/issues/2441"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.6,3.6.9), [3.7,3.7.1) , [3.8,3.8.2), [3.9,3.9.1), [4-alpha,4.0.19)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha",
          "io.netty:netty@3.7.0.Final"
        ],
        "upgradePath": [
          false,
          false,
          "io.netty:netty@3.7.1.Final"
        ],
        "version": "3.7.0.Final",
        "name": "io.netty:netty",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.122000Z",
        "credit": [
          "Roman Shafigullin",
          "Luca Carettoni",
          "Mukul Khullar"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n\r\n[io.netty:netty](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22) is a NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients.\r\n\r\n\r\nAffected versions of this package are vulnerable to Information Disclosure.\r\nIt does not validate cookie name and value characters, allowing attackers to potentially bypass the `httpOnly` flag on sensitive cookies.\r\n\r\n## Remediation\r\n\r\nUpgrade `io.netty:netty` to version 3.9.8.Final, 3.10.3.Final or higher.\r\n\r\n\r\n## References\r\n\r\n- [Linkedin Security Blog](https://engineering.linkedin.com/security/look-netty_s-recent-security-update-cve--2015--2156)\r\n\r\n- [Release Notes 3.9.8 and 3.10.3](http://netty.io/news/2015/05/08/3-9-8-Final-and-3.html)\r\n\r\n- [GitHub PR 3.9.8 and 3.10.3](https://github.com/netty/netty/pull/3754)\r\n\r\n- [GitHub Commit 3.9.8](https://github.com/netty/netty/commit/31815598a2af37f0b71ea94eada70d6659c23752)\r\n\r\n- [GitHub Commit 3.10.3](https://github.com/netty/netty/commit/2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55)\r\n\r\n- [Release Notes 4.0.28](http://netty.io/news/2015/05/07/4-0-28-Final.html)\r\n\r\n- [GitHub PR 4.0.28](https://github.com/netty/netty/pull/3748)\r\n\r\n- [GitHub Commit 4.0.8](https://github.com/netty/netty/pull/3748/commits/4ac519f534493bb0ca7a77e1c779138a54faa7b9)\r\n",
        "disclosureTime": "2015-04-08T21:44:31Z",
        "functions": [
          {
            "functionId": {
              "className": "CookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/CookieEncoder.java",
              "functionName": "encode"
            },
            "version": [
              "[3.10.0,3.10.2)",
              "[3.3.0,3.9.7)"
            ]
          },
          {
            "functionId": {
              "className": "ServerCookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
              "functionName": "encode"
            },
            "version": [
              "[3.9.7,3.9.8.Final)",
              "[3.10.2,3.10.3.Final)"
            ]
          }
        ],
        "id": "SNYK-JAVA-IONETTY-30430",
        "identifiers": {
          "CVE": [
            "CVE-2015-2156"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "netty",
          "groupId": "io.netty"
        },
        "methods": [
          {
            "methodId": {
              "className": "CookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/CookieEncoder.java",
              "methodName": "encode"
            },
            "version": [
              "[3.10.0,3.10.2)",
              "[3.3.0,3.9.7)"
            ]
          },
          {
            "methodId": {
              "className": "ServerCookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
              "methodName": "encode"
            },
            "version": [
              "[3.9.7,3.9.8.Final)",
              "[3.10.2,3.10.3.Final)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T16:47:40.583684Z",
        "moduleName": "io.netty:netty",
        "packageManager": "maven",
        "packageName": "io.netty:netty",
        "patches": [],
        "publicationTime": "2015-04-08T21:44:31Z",
        "references": [
          {
            "title": "Linkedin Security Blog",
            "url": "https://engineering.linkedin.com/security/look-netty_s-recent-security-update-cve--2015--2156"
          },
          {
            "title": "Release Notes 3.9.8 and 3.10.3",
            "url": "http://netty.io/news/2015/05/08/3-9-8-Final-and-3.html"
          },
          {
            "title": "GitHub PR 3.9.8 and 3.10.3",
            "url": "https://github.com/netty/netty/pull/3754"
          },
          {
            "title": "GitHub Commit 3.9.8",
            "url": "https://github.com/netty/netty/commit/31815598a2af37f0b71ea94eada70d6659c23752"
          },
          {
            "title": "GitHub Commit 3.10.3",
            "url": "https://github.com/netty/netty/commit/2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55"
          },
          {
            "title": "Release Notes 4.0.28",
            "url": "http://netty.io/news/2015/05/07/4-0-28-Final.html"
          },
          {
            "title": "GitHub PR 4.0.28",
            "url": "https://github.com/netty/netty/pull/3748"
          },
          {
            "title": "GitHub Commit 4.0.8",
            "url": "https://github.com/netty/netty/pull/3748/commits/4ac519f534493bb0ca7a77e1c779138a54faa7b9"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.3,3.9.8.Final)",
            "[3.10,3.10.3.Final)"
          ]
        },
        "severity": "high",
        "title": "Information Disclosure",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha",
          "io.netty:netty@3.7.0.Final"
        ],
        "upgradePath": [
          false,
          false,
          "io.netty:netty@3.9.8.Final"
        ],
        "version": "3.7.0.Final",
        "name": "io.netty:netty",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-01-17T07:28:21.802000Z",
        "credit": [
          "James Kettle"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.httpcomponents:httpclient`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22httpclient%22) is HttpClient component of the Apache HttpComponents project.\r\n\r\nAffected versions of the package are vulnerable to `Directory Traversal`, which may allow access to sensitive files and data on the server. \r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.2 or higher.\r\n\r\n## References\r\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\r\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\r\n- [Github Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)",
        "disclosureTime": "2017-01-17T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-23"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "httpclient",
          "groupId": "org.apache.httpcomponents"
        },
        "methods": [
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T10:32:17.893248Z",
        "moduleName": "org.apache.httpcomponents:httpclient",
        "packageManager": "maven",
        "packageName": "org.apache.httpcomponents:httpclient",
        "patches": [],
        "publicationTime": "2017-09-20T00:00:00Z",
        "references": [
          {
            "title": "Researcher blog post",
            "url": "http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/HTTPCLIENT-1803"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.5.2)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.thrift:libthrift@0.10.0",
          "org.apache.httpcomponents:httpclient@4.4.1"
        ],
        "upgradePath": [
          false,
          "org.apache.thrift:libthrift@0.12.0",
          "org.apache.httpcomponents:httpclient@4.5.6"
        ],
        "version": "4.4.1",
        "name": "org.apache.httpcomponents:httpclient",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-02-17T16:13:16.287612Z",
        "credit": [
          "Asger Feldthaus"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n\r\n[org.apache.thrift:libthrift](https://mvnrepository.com/artifact/org.apache.thrift/libthrift) is a lightweight, language-independent software stack with an associated code generation mechanism for point-to-point RPC.\r\n\r\n\r\nAffected versions of this package are vulnerable to Improper Access Control.\r\nA remote user had the ability to access files outside the set `webservers docroot` path.\r\n\r\n## Remediation\r\n\r\nUpgrade `org.apache.thrift:libthrift` to version 0.11.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Apache Mail Archive](https://lists.apache.org/thread.html/6e9edd282684896cedf615fb67a02bebfe6007f2d5baf03ba52e34fd@%3Cuser.thrift.apache.org%3E)\r\n\r\n- [GitHub Commit](https://github.com/apache/thrift/commit/2a2b72f6c8aef200ecee4984f011e06052288ff2)\r\n\r\n- [Thrift Jira Issue](https://issues.apache.org/jira/browse/THRIFT-4647)\r\n",
        "disclosureTime": "2019-01-07T16:29:20Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGAPACHETHRIFT-173706",
        "identifiers": {
          "CVE": [
            "CVE-2018-11798"
          ],
          "CWE": [
            "CWE-284"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "libthrift",
          "groupId": "org.apache.thrift"
        },
        "methods": [],
        "modificationTime": "2019-02-19T15:28:08.993936Z",
        "moduleName": "org.apache.thrift:libthrift",
        "packageManager": "maven",
        "packageName": "org.apache.thrift:libthrift",
        "patches": [],
        "publicationTime": "2019-02-17T16:14:03Z",
        "references": [
          {
            "title": "Apache Mail Archive",
            "url": "https://lists.apache.org/thread.html/6e9edd282684896cedf615fb67a02bebfe6007f2d5baf03ba52e34fd@%3Cuser.thrift.apache.org%3E"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/thrift/commit/2a2b72f6c8aef200ecee4984f011e06052288ff2"
          },
          {
            "title": "Thrift Jira Issue",
            "url": "https://issues.apache.org/jira/browse/THRIFT-4647"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0.9.2, 0.11.0)"
          ]
        },
        "severity": "medium",
        "title": "Improper Access Control",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.thrift:libthrift@0.10.0"
        ],
        "upgradePath": [
          false,
          "org.apache.thrift:libthrift@0.11.0"
        ],
        "version": "0.10.0",
        "name": "org.apache.thrift:libthrift",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2018-05-21T18:49:04.301000Z",
        "credit": [
          "Foldi Tamas",
          "Eugene Koontz"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[org.apache.zookeeper:zookeeper](http://zookeeper.apache.org/) is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.\n\nAffected versions of this package are vulnerable to Authentication Bypass. No authentication/authorization is enforced when a server attempts to join a quorum, as a result an arbitrary end point could join the cluster and begin propagating counterfeit changes to the leader.\n\n## Remediation\nUpgrade `org.apache.zookeeper:zookeeper` to versions 3.4.10, 3.5.4-beta or higher.\n\n## References\n- [Apache Mail Archives](https://lists.apache.org/thread.html/c75147028c1c79bdebd4f8fa5db2b77da85de2b05ecc0d54d708b393@%3Cdev.zookeeper.apache.org%3E)\n",
        "disclosureTime": "2018-05-21T18:49:04.301000Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGAPACHEZOOKEEPER-32301",
        "identifiers": {
          "CVE": [
            "CVE-2018-8012"
          ],
          "CWE": [
            "CWE-592"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "zookeeper",
          "groupId": "org.apache.zookeeper"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.743063Z",
        "moduleName": "org.apache.zookeeper:zookeeper",
        "packageManager": "maven",
        "packageName": "org.apache.zookeeper:zookeeper",
        "patches": [],
        "publicationTime": "2018-05-22T13:32:24.317000Z",
        "references": [
          {
            "title": "Apache Mail Archives",
            "url": "https://lists.apache.org/thread.html/c75147028c1c79bdebd4f8fa5db2b77da85de2b05ecc0d54d708b393@%3Cdev.zookeeper.apache.org%3E"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.4.10), [3.5.0-alpha, 3.5.4-beta)"
          ]
        },
        "severity": "high",
        "title": "Authentication Bypass",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha"
        ],
        "upgradePath": [],
        "version": "3.5.0-alpha",
        "name": "org.apache.zookeeper:zookeeper",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 54,
    "severityMap": {
      "high": 9,
      "medium": 5,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "29 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 14,
    "path": "scm:git:git@github.com:twitter/finagle.git"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:07.540945Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:19:49Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
        "identifiers": {
          "CVE": [
            "CVE-2018-14718"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:43:36.706884Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:41Z",
        "references": [
          {
            "title": "Github Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:21:22.141403Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:20:17Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
        "identifiers": {
          "CVE": [
            "CVE-2018-14720"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:14.549504Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:19:17Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:23:45.326350Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n\r\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\r\n",
        "disclosureTime": "2018-07-27T17:22:45Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
        "identifiers": {
          "CVE": [
            "CVE-2018-14719"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-02-26T12:24:30.136235Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:22:38Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          },
          {
            "title": "GitHub Release Notes",
            "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-10-11T17:25:40.161831Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n \r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\r\n",
        "disclosureTime": "2018-07-27T17:24:46Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
        "identifiers": {
          "CVE": [
            "CVE-2018-14721"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[,2.9.7)"
            ]
          }
        ],
        "modificationTime": "2019-03-13T10:45:21.178273Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2018-10-11T17:24:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,2.6.7.2)",
            "[2.7.9.0, 2.7.9.5)",
            "[2.8.0 ,2.8.11.3)",
            "[2.9.0, 2.9.7)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.7",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.7",
          "com.fasterxml.jackson.core:jackson-databind@2.9.7"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:19.256477Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
        "identifiers": {
          "CVE": [
            "CVE-2018-19362"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.604674Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.589777Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:23.673097Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:44Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
        "identifiers": {
          "CVE": [
            "CVE-2018-19360"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.581795Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.566607Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-03T14:17:31.715185Z",
        "credit": [
          "Wuguixiong"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\r\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\r\n\r\n## Remediation\r\n\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\r\n\r\n\r\n## References\r\n\r\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\r\n\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\r\n\r\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\r\n",
        "disclosureTime": "2019-01-02T19:18:43Z",
        "functions": [
          {
            "functionId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "functionName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
        "identifiers": {
          "CVE": [
            "CVE-2018-19361"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-databind",
          "groupId": "com.fasterxml.jackson.core"
        },
        "methods": [
          {
            "methodId": {
              "className": "ObjectMapper",
              "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
              "methodName": "enableDefaultTyping"
            },
            "version": [
              "[2.0.0, 2.9.8)"
            ]
          }
        ],
        "modificationTime": "2019-01-03T17:01:51.558221Z",
        "moduleName": "com.fasterxml.jackson.core:jackson-databind",
        "packageManager": "maven",
        "packageName": "com.fasterxml.jackson.core:jackson-databind",
        "patches": [],
        "publicationTime": "2019-01-03T17:01:51.540041Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
          },
          {
            "title": "GitHub Release Tag",
            "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.0.0, 2.9.8)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.6",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.6",
          "com.fasterxml.jackson.core:jackson-databind@2.9.6"
        ],
        "upgradePath": [
          false,
          "com.fasterxml.jackson.module:jackson-module-scala_2.12@2.9.8",
          "com.fasterxml.jackson.module:jackson-module-paranamer@2.9.8",
          "com.fasterxml.jackson.core:jackson-databind@2.9.8"
        ],
        "version": "2.9.6",
        "name": "com.fasterxml.jackson.core:jackson-databind",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "com.google.guava:guava@16.0.1"
        ],
        "upgradePath": [
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "16.0.1",
        "name": "com.google.guava:guava",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "twitter/finagle@twitter/finagle",
          "io.opencensus:opencensus-impl@0.19.1",
          "io.opencensus:opencensus-impl-core@0.19.1",
          "com.google.guava:guava@16.0.1"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "16.0.1",
        "name": "com.google.guava:guava",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:52Z",
        "credit": [
          "Laurentiu Luca"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`io.netty:netty`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22)\nThe SslHandler in Netty before 3.9.2 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted SSLv2Hello message.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3488)\n- [GitHub Issue](https://github.com/netty/netty/issues/2562)\n- [Netty release notes](http://netty.io/news/2014/06/11/3-9-2-Final.html)\n",
        "disclosureTime": "2014-06-11T16:51:52Z",
        "functions": [],
        "id": "SNYK-JAVA-IONETTY-30100",
        "identifiers": {
          "CVE": [
            "CVE-2014-3488"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "netty",
          "groupId": "io.netty"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.213375Z",
        "moduleName": "io.netty:netty",
        "packageManager": "maven",
        "packageName": "io.netty:netty",
        "patches": [],
        "publicationTime": "2014-06-11T16:51:52Z",
        "references": [
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2014-3488"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/netty/netty/issues/2562"
          },
          {
            "title": "Netty release notes",
            "url": "http://netty.io/news/2014/06/11/3-9-2-Final.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.9.1.Final]"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha",
          "io.netty:netty@3.7.0.Final"
        ],
        "upgradePath": [
          false,
          false,
          "io.netty:netty@3.9.1.1.Final"
        ],
        "version": "3.7.0.Final",
        "name": "io.netty:netty",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.109000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[`io.netty:netty`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22) is an event-driven asynchronous network application framework.\n\nAffected versions of this package are vulnerable to Denial of Service attack. `WebSocket08FrameDecoder` allows remote attackers to cause a denial of service (memory consumption) via a `TextWebSocketFrame` followed by a long stream of `ContinuationWebSocketFrames`.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\nUpgrade `io.netty:netty` to versions 3.6.9, 3.7.1, 3.8.2, 3.9.1, 4.0.19 or higher. \n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0193)\n- [Netty Release Notes](http://netty.io/news/2014/04/30/release-day.html)\n- [Guthub Issue](https://github.com/netty/netty/issues/2441)\n",
        "disclosureTime": "2015-02-11T00:22:53Z",
        "functions": [],
        "id": "SNYK-JAVA-IONETTY-30429",
        "identifiers": {
          "CVE": [
            "CVE-2014-0193"
          ],
          "CWE": [
            "CWE-399"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "netty",
          "groupId": "io.netty"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.819564Z",
        "moduleName": "io.netty:netty",
        "packageManager": "maven",
        "packageName": "io.netty:netty",
        "patches": [],
        "publicationTime": "2015-02-11T00:22:53Z",
        "references": [
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0193"
          },
          {
            "title": "Netty Release Notes",
            "url": "http://netty.io/news/2014/04/30/release-day.html"
          },
          {
            "title": "Guthub Issue",
            "url": "https://github.com/netty/netty/issues/2441"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.6,3.6.9), [3.7,3.7.1) , [3.8,3.8.2), [3.9,3.9.1), [4-alpha,4.0.19)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha",
          "io.netty:netty@3.7.0.Final"
        ],
        "upgradePath": [
          false,
          false,
          "io.netty:netty@3.7.1.Final"
        ],
        "version": "3.7.0.Final",
        "name": "io.netty:netty",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:19.122000Z",
        "credit": [
          "Roman Shafigullin",
          "Luca Carettoni",
          "Mukul Khullar"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n\r\n[io.netty:netty](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22) is a NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients.\r\n\r\n\r\nAffected versions of this package are vulnerable to Information Disclosure.\r\nIt does not validate cookie name and value characters, allowing attackers to potentially bypass the `httpOnly` flag on sensitive cookies.\r\n\r\n## Remediation\r\n\r\nUpgrade `io.netty:netty` to version 3.9.8.Final, 3.10.3.Final or higher.\r\n\r\n\r\n## References\r\n\r\n- [Linkedin Security Blog](https://engineering.linkedin.com/security/look-netty_s-recent-security-update-cve--2015--2156)\r\n\r\n- [Release Notes 3.9.8 and 3.10.3](http://netty.io/news/2015/05/08/3-9-8-Final-and-3.html)\r\n\r\n- [GitHub PR 3.9.8 and 3.10.3](https://github.com/netty/netty/pull/3754)\r\n\r\n- [GitHub Commit 3.9.8](https://github.com/netty/netty/commit/31815598a2af37f0b71ea94eada70d6659c23752)\r\n\r\n- [GitHub Commit 3.10.3](https://github.com/netty/netty/commit/2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55)\r\n\r\n- [Release Notes 4.0.28](http://netty.io/news/2015/05/07/4-0-28-Final.html)\r\n\r\n- [GitHub PR 4.0.28](https://github.com/netty/netty/pull/3748)\r\n\r\n- [GitHub Commit 4.0.8](https://github.com/netty/netty/pull/3748/commits/4ac519f534493bb0ca7a77e1c779138a54faa7b9)\r\n",
        "disclosureTime": "2015-04-08T21:44:31Z",
        "functions": [
          {
            "functionId": {
              "className": "CookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/CookieEncoder.java",
              "functionName": "encode"
            },
            "version": [
              "[3.10.0,3.10.2)",
              "[3.3.0,3.9.7)"
            ]
          },
          {
            "functionId": {
              "className": "ServerCookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
              "functionName": "encode"
            },
            "version": [
              "[3.9.7,3.9.8.Final)",
              "[3.10.2,3.10.3.Final)"
            ]
          }
        ],
        "id": "SNYK-JAVA-IONETTY-30430",
        "identifiers": {
          "CVE": [
            "CVE-2015-2156"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "netty",
          "groupId": "io.netty"
        },
        "methods": [
          {
            "methodId": {
              "className": "CookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/CookieEncoder.java",
              "methodName": "encode"
            },
            "version": [
              "[3.10.0,3.10.2)",
              "[3.3.0,3.9.7)"
            ]
          },
          {
            "methodId": {
              "className": "ServerCookieEncoder.java",
              "filePath": "org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
              "methodName": "encode"
            },
            "version": [
              "[3.9.7,3.9.8.Final)",
              "[3.10.2,3.10.3.Final)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T16:47:40.583684Z",
        "moduleName": "io.netty:netty",
        "packageManager": "maven",
        "packageName": "io.netty:netty",
        "patches": [],
        "publicationTime": "2015-04-08T21:44:31Z",
        "references": [
          {
            "title": "Linkedin Security Blog",
            "url": "https://engineering.linkedin.com/security/look-netty_s-recent-security-update-cve--2015--2156"
          },
          {
            "title": "Release Notes 3.9.8 and 3.10.3",
            "url": "http://netty.io/news/2015/05/08/3-9-8-Final-and-3.html"
          },
          {
            "title": "GitHub PR 3.9.8 and 3.10.3",
            "url": "https://github.com/netty/netty/pull/3754"
          },
          {
            "title": "GitHub Commit 3.9.8",
            "url": "https://github.com/netty/netty/commit/31815598a2af37f0b71ea94eada70d6659c23752"
          },
          {
            "title": "GitHub Commit 3.10.3",
            "url": "https://github.com/netty/netty/commit/2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55"
          },
          {
            "title": "Release Notes 4.0.28",
            "url": "http://netty.io/news/2015/05/07/4-0-28-Final.html"
          },
          {
            "title": "GitHub PR 4.0.28",
            "url": "https://github.com/netty/netty/pull/3748"
          },
          {
            "title": "GitHub Commit 4.0.8",
            "url": "https://github.com/netty/netty/pull/3748/commits/4ac519f534493bb0ca7a77e1c779138a54faa7b9"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.3,3.9.8.Final)",
            "[3.10,3.10.3.Final)"
          ]
        },
        "severity": "high",
        "title": "Information Disclosure",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha",
          "io.netty:netty@3.7.0.Final"
        ],
        "upgradePath": [
          false,
          false,
          "io.netty:netty@3.9.8.Final"
        ],
        "version": "3.7.0.Final",
        "name": "io.netty:netty",
        "isUpgradable": false,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2017-01-17T07:28:21.802000Z",
        "credit": [
          "James Kettle"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.httpcomponents:httpclient`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22httpclient%22) is HttpClient component of the Apache HttpComponents project.\r\n\r\nAffected versions of the package are vulnerable to `Directory Traversal`, which may allow access to sensitive files and data on the server. \r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.2 or higher.\r\n\r\n## References\r\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\r\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\r\n- [Github Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)",
        "disclosureTime": "2017-01-17T00:00:00Z",
        "functions": [
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "functionId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "functionName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-23"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "httpclient",
          "groupId": "org.apache.httpcomponents"
        },
        "methods": [
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIUtils.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.1,4.1.3]"
            ]
          },
          {
            "methodId": {
              "className": "URIBuilder",
              "filePath": "org/apache/http/client/utils/URIBuilder.java",
              "methodName": "normalizePath"
            },
            "version": [
              "[4.2.1 ,4.5.2)"
            ]
          }
        ],
        "modificationTime": "2019-03-25T10:32:17.893248Z",
        "moduleName": "org.apache.httpcomponents:httpclient",
        "packageManager": "maven",
        "packageName": "org.apache.httpcomponents:httpclient",
        "patches": [],
        "publicationTime": "2017-09-20T00:00:00Z",
        "references": [
          {
            "title": "Researcher blog post",
            "url": "http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/HTTPCLIENT-1803"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.5.2)"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.thrift:libthrift@0.10.0",
          "org.apache.httpcomponents:httpclient@4.4.1"
        ],
        "upgradePath": [
          false,
          "org.apache.thrift:libthrift@0.12.0",
          "org.apache.httpcomponents:httpclient@4.5.6"
        ],
        "version": "4.4.1",
        "name": "org.apache.httpcomponents:httpclient",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-02-17T16:13:16.287612Z",
        "credit": [
          "Asger Feldthaus"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\r\n\r\n[org.apache.thrift:libthrift](https://mvnrepository.com/artifact/org.apache.thrift/libthrift) is a lightweight, language-independent software stack with an associated code generation mechanism for point-to-point RPC.\r\n\r\n\r\nAffected versions of this package are vulnerable to Improper Access Control.\r\nA remote user had the ability to access files outside the set `webservers docroot` path.\r\n\r\n## Remediation\r\n\r\nUpgrade `org.apache.thrift:libthrift` to version 0.11.0 or higher.\r\n\r\n\r\n## References\r\n\r\n- [Apache Mail Archive](https://lists.apache.org/thread.html/6e9edd282684896cedf615fb67a02bebfe6007f2d5baf03ba52e34fd@%3Cuser.thrift.apache.org%3E)\r\n\r\n- [GitHub Commit](https://github.com/apache/thrift/commit/2a2b72f6c8aef200ecee4984f011e06052288ff2)\r\n\r\n- [Thrift Jira Issue](https://issues.apache.org/jira/browse/THRIFT-4647)\r\n",
        "disclosureTime": "2019-01-07T16:29:20Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGAPACHETHRIFT-173706",
        "identifiers": {
          "CVE": [
            "CVE-2018-11798"
          ],
          "CWE": [
            "CWE-284"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "libthrift",
          "groupId": "org.apache.thrift"
        },
        "methods": [],
        "modificationTime": "2019-02-19T15:28:08.993936Z",
        "moduleName": "org.apache.thrift:libthrift",
        "packageManager": "maven",
        "packageName": "org.apache.thrift:libthrift",
        "patches": [],
        "publicationTime": "2019-02-17T16:14:03Z",
        "references": [
          {
            "title": "Apache Mail Archive",
            "url": "https://lists.apache.org/thread.html/6e9edd282684896cedf615fb67a02bebfe6007f2d5baf03ba52e34fd@%3Cuser.thrift.apache.org%3E"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/thrift/commit/2a2b72f6c8aef200ecee4984f011e06052288ff2"
          },
          {
            "title": "Thrift Jira Issue",
            "url": "https://issues.apache.org/jira/browse/THRIFT-4647"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0.9.2, 0.11.0)"
          ]
        },
        "severity": "medium",
        "title": "Improper Access Control",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.thrift:libthrift@0.10.0"
        ],
        "upgradePath": [
          false,
          "org.apache.thrift:libthrift@0.11.0"
        ],
        "version": "0.10.0",
        "name": "org.apache.thrift:libthrift",
        "isUpgradable": true,
        "isPatchable": false
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2018-05-21T18:49:04.301000Z",
        "credit": [
          "Foldi Tamas",
          "Eugene Koontz"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[org.apache.zookeeper:zookeeper](http://zookeeper.apache.org/) is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.\n\nAffected versions of this package are vulnerable to Authentication Bypass. No authentication/authorization is enforced when a server attempts to join a quorum, as a result an arbitrary end point could join the cluster and begin propagating counterfeit changes to the leader.\n\n## Remediation\nUpgrade `org.apache.zookeeper:zookeeper` to versions 3.4.10, 3.5.4-beta or higher.\n\n## References\n- [Apache Mail Archives](https://lists.apache.org/thread.html/c75147028c1c79bdebd4f8fa5db2b77da85de2b05ecc0d54d708b393@%3Cdev.zookeeper.apache.org%3E)\n",
        "disclosureTime": "2018-05-21T18:49:04.301000Z",
        "functions": [],
        "id": "SNYK-JAVA-ORGAPACHEZOOKEEPER-32301",
        "identifiers": {
          "CVE": [
            "CVE-2018-8012"
          ],
          "CWE": [
            "CWE-592"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "zookeeper",
          "groupId": "org.apache.zookeeper"
        },
        "methods": [],
        "modificationTime": "2018-11-22T10:10:07.743063Z",
        "moduleName": "org.apache.zookeeper:zookeeper",
        "packageManager": "maven",
        "packageName": "org.apache.zookeeper:zookeeper",
        "patches": [],
        "publicationTime": "2018-05-22T13:32:24.317000Z",
        "references": [
          {
            "title": "Apache Mail Archives",
            "url": "https://lists.apache.org/thread.html/c75147028c1c79bdebd4f8fa5db2b77da85de2b05ecc0d54d708b393@%3Cdev.zookeeper.apache.org%3E"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.4.10), [3.5.0-alpha, 3.5.4-beta)"
          ]
        },
        "severity": "high",
        "title": "Authentication Bypass",
        "from": [
          "twitter/finagle@twitter/finagle",
          "org.apache.zookeeper:zookeeper@3.5.0-alpha"
        ],
        "upgradePath": [],
        "version": "3.5.0-alpha",
        "name": "org.apache.zookeeper:zookeeper",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 54,
    "severityMap": {
      "high": 9,
      "medium": 5,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "29 vulnerable dependency paths",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 14,
    "path": "https://github.com/twitter/finagle"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f3fb952f-3f15-42ba-8bc3-294f06b1fbd7)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-ehcache"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 2c132758-f6e9-4b56-b546-5b7608d5a965)",
    "path": "scm:git:git://github.com/dropwizard/metrics.git/metrics-ganglia"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/dropwizard/metrics"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ogaclejapan/SmartTabLayout"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git@github.com:nhaarman/ListViewAnimations.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a03ba640-ca24-4753-afee-6e62d19ce9f6)",
    "path": "scm:git:git@github.com:wordnik/swagger-core.git/swagger-core_2.9.1"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 7a7f857a-98d9-491d-b79d-52c5a4ea47bb)",
    "path": "scm:git:git@github.com:swagger-api/swagger-core.git/swagger-jersey2-jaxrs_2.10"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 277bd3d6-c060-4e8a-9fb9-f6dacfb1f5ca)",
    "path": "scm:git:git@github.com:swagger-api/swagger-core.git/swagger-annotations"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 52030f4b-e51f-479e-ae9e-abe99730e0ff)",
    "path": "scm:git:git@github.com:swagger-api/swagger-core.git/swagger-jersey-jaxrs_2.10"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/koush/AndroidAsync"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9236200d-cd42-4513-9bdb-09e8c4689739)",
    "path": "scm:git:git://github.com/emilsjolander/StickyListHeaders.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/vinc3m1/RoundedImageView"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 268048fa-9cc5-4480-8f36-b67bd0152878)",
    "path": "scm:git:git@github.com:Activiti/Activiti.git/activiti-diagram-rest"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/ansjsun/ansj_seg"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 3,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/thinkaurelius/titan"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git@github.com:gabrielemariotti/cardslib.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 9e6e3e70-0bcd-4c23-8b68-f59e8e93737d)",
    "path": "https://acra.googlecode.com/svn/tags/acra-4.2.3"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git@github.com:etsy/AndroidStaggeredGrid.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: fe1ec93c-2bf9-4aea-88a2-3ad2164065f8)",
    "path": "scm:git:git://github.com/JakeWharton/NineOldAndroids.git/library"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 4534a98c-8107-4489-9fc5-fe03efa2bc88)",
    "path": "scm:git:https://github.com/google/error-prone.git/error_prone_core"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/NanoHttpd/nanohttpd.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/castorflex/SmoothProgressBar"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/scalaz/scalaz"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/wdullaer/MaterialDateTimePicker"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/haifengl/smile"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 316269a8-9882-4929-b191-8d6eef183f5c)",
    "path": "scm:git:https://github.com/roboguice/roboguice.git/roboguice"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 11dd7183-3b8c-47b9-9f4f-098c437553ff)",
    "path": "scm:git:git@github.com:orientechnologies/orientdb.git/orientdb-client"
  },
  {
    "ok": false,
    "error": "Internal error (reference: a523dc56-07a7-4828-b777-1fa6b982a489)",
    "path": "scm:git:git@github.com:orientechnologies/orientdb.git/orientdb-graphdb"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 1064cc3f-2d9e-4e6d-b9ec-41acf6120051)",
    "path": "scm:git:git@github.com:orientechnologies/orientdb.git/orientdb-tools"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/Ashok-Varma/bottomnavigation"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git@github.com:BoltsFramework/Bolts-Android.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 0a746a9a-93e7-4131-89d1-8cbebc2573f8)",
    "path": "scm:git:git://github.com/keycloak/keycloak.git/keycloak-undertow-adapter"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 6b15e4ec-3cf9-4461-87de-54201ec73388)",
    "path": "scm:git:git://github.com/keycloak/keycloak.git/keycloak-adapter-core"
  },
  {
    "ok": false,
    "error": "Internal error (reference: bbefecd5-efae-442e-a838-4f8a83ce198f)",
    "path": "scm:git:git@github.com:SonarSource/sonarqube.git/sonar-testing-harness"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/SonarSource/sonarqube.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 64719b1d-8e7a-4f62-bf4d-930768224c36)",
    "path": "scm:git:git@github.com:SonarSource/sonarqube.git/sonar-plugin-api"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jfoenixadmin/JFoenix"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 31ac1912-c6f1-462c-9330-9a59165bc965)",
    "path": "scm:git:git@github.com:johncarl81/parceler.git/parceler"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/spring-cloud/spring-cloud-netflix.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/graphql-java/graphql-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 26,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/typelevel/cats"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 4,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/socketio/socket.io-client-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "npm",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/npm/node-semver"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 91a1d095-54be-4172-a7fc-552c57e76fd4)",
    "path": "https://github.com/spray/spray"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/web3j/web3j"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 14,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "pip",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/testcontainers/testcontainers-java"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:slick/slick.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/pmd/pmd"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/pmd/pmd.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c89dd163-b5e0-4ae4-be49-459efd6464f1)",
    "path": "https://github.com/twitter/twitter-text-java"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 6ab5575d-210b-48d0-93e0-42716b82330e)",
    "path": "scm:git:https://github.com:droolsjbpm/drools.git/drools-decisiontables"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/jamesdbloom/mockservice.git"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 2,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/JakeWharton/RxRelay"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 8a2c8c72-550d-435a-9974-a3022b9d8d0c)",
    "path": "scm:git:git://github.com/cucumber/cucumber-jvm.git/cucumber-testng"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/javamelody/javamelody"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 1,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/zeromq/jeromq"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 41,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "sbt",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/travisbrown/circe"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 13801827-6f85-4bb3-88c1-f8af5ebb9cb5)",
    "path": "scm:git:git://github.com/square/fest-android.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 03e74236-9a9c-40fb-a2f5-4ca15046c014)",
    "path": "scm:git:git@github.com:hamcrest/JavaHamcrest.git/hamcrest-integration"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "gradle",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "scm:git:git@github.com:osmdroid/osmdroid.git"
  },
  {
    "ok": false,
    "error": "Internal error (reference: f676ca63-6023-4fe5-9da7-204e826c2a82)",
    "path": "scm:git:git://github.com/jayway/awaitility.git/awaitility"
  },
  {
    "ok": false,
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-04-25T07:28:15.755000Z",
        "credit": [
          "Apostolos Giannakidis"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\r\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. \r\n\r\nDuring deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.google.guava:guava` to version 24.1.1-jre, 24.1.1-android or higher.\n\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
        "disclosureTime": "2018-04-25T07:28:15Z",
        "functions": [
          {
            "functionId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "functionName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
        "identifiers": {
          "CVE": [
            "CVE-2018-10237"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "guava",
          "groupId": "com.google.guava"
        },
        "methods": [
          {
            "methodId": {
              "className": "AtomicDoubleArray",
              "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
              "methodName": "readObject"
            },
            "version": [
              "[11.0, 24.1.1-android)",
              "(24.1.1-android, 24.1.1-jre)"
            ]
          }
        ],
        "modificationTime": "2019-04-02T15:42:13.776477Z",
        "moduleName": "com.google.guava:guava",
        "packageManager": "maven",
        "packageName": "com.google.guava:guava",
        "patches": [],
        "publicationTime": "2018-05-02T13:38:04Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
          },
          {
            "title": "RedHat Bugzilla",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
          },
          {
            "title": "Google Group Forum",
            "url": "https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion"
          }
        ],
        "semver": {
          "vulnerable": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        },
        "severity": "medium",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "SpringSource/spring-data-jpa@SpringSource/spring-data-jpa",
          "com.querydsl:querydsl-jpa@4.2.1",
          "com.querydsl:querydsl-core@4.2.1",
          "com.google.guava:guava@18.0"
        ],
        "upgradePath": [
          false,
          false,
          false,
          "com.google.guava:guava@24.1.1-jre"
        ],
        "version": "18.0",
        "name": "com.google.guava:guava",
        "isUpgradable": false,
        "isPatchable": false
      }
    ],
    "numDependencies": 35,
    "severityMap": {
      "high": 0,
      "medium": 1,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "1 vulnerable dependency path",
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "https://github.com/SpringSource/spring-data-jpa"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 83e0cf82-ad75-4177-8d6f-c02e61b8bea2)",
    "path": "https://github.com/jOOQ/jOOL"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 77cf8f49-f2e1-4f4f-86e3-440cb6e7526d)",
    "path": "scm:git:git@github.com:liferay/liferay-portal.git/util-bridges"
  },
  {
    "ok": false,
    "error": "Internal error (reference: 5be50367-caef-4036-80eb-24c2438467c6)",
    "path": "scm:git:git@github.com:liferay/liferay-portal.git/portal-impl"
  },
  {
    "ok": false,
    "error": "Internal error (reference: c5c42c8a-c1fc-444f-8798-695d143de85c)",
    "path": "scm:git:git@github.com:liferay/liferay-portal.git/util-taglib"
  },
  {
    "ok": false,
    "error": "Internal error (reference: d1002723-e8c5-48ee-89fd-1cd8ee066a51)",
    "path": "https://github.com/google/googleapis"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/kristofa/brave"
  },
  {
    "ok": true,
    "vulnerabilities": [],
    "numDependencies": 0,
    "severityMap": {
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "org": "alextompkins",
    "packageManager": "maven",
    "summary": "No known vulnerabilities",
    "uniqueCount": 0,
    "path": "https://github.com/openzipkin/brave"
  }
]
